{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"euler",
				"eulerRot"
			],
			[
				"Eule",
				"EulerAngles"
			],
			[
				"tra",
				"transferCoefs"
			],
			[
				"vec",
				"vec2"
			],
			[
				"se",
				"setArray"
			],
			[
				"trans",
				"transfer0"
			],
			[
				"add",
				"addChild"
			],
			[
				"if",
				"if	If Condition"
			],
			[
				"Scene",
				"SceneController"
			],
			[
				"en",
				"environments"
			],
			[
				"re",
				"reduceJoints"
			],
			[
				"osg",
				"osgUtil"
			],
			[
				"tr",
				"transferCoefs"
			],
			[
				"size",
				"sizeof"
			],
			[
				"r",
				"reducedJoints"
			],
			[
				"cl",
				"cluster"
			],
			[
				"clust",
				"clusters"
			],
			[
				"ne",
				"neighbor"
			],
			[
				"dist",
				"distance"
			],
			[
				"str",
				"stream"
			],
			[
				"Matr",
				"Matrix"
			],
			[
				"new",
				"newLabel"
			],
			[
				"name",
				"namespace"
			],
			[
				"di",
				"diffuse"
			],
			[
				"Pgt",
				"PgtUpdate"
			],
			[
				"setR",
				"setRenderTargetImplementation"
			],
			[
				"Texture",
				"Texture2D"
			],
			[
				"main",
				"mainrender"
			],
			[
				"vertex",
				"vertexShader"
			],
			[
				"shadow",
				"shadowAmount"
			],
			[
				"li",
				"lightColor"
			],
			[
				"Vec3",
				"Vec3Array"
			],
			[
				"Vec4",
				"Vec4Array"
			],
			[
				"set",
				"setCameraManipulator"
			],
			[
				"num",
				"numHarmonics"
			],
			[
				"Light",
				"LightSource"
			],
			[
				"faces",
				"facesSize"
			],
			[
				"vert",
				"vertices"
			],
			[
				"read",
				"readImageFile"
			],
			[
				"color",
				"colorMaps"
			],
			[
				"coo",
				"cooldowns"
			],
			[
				"Ed",
				"EditBox:Enable	()"
			],
			[
				"GetT",
				"GetText	()"
			],
			[
				"for",
				"for	for i=1,10"
			],
			[
				"PET",
				"PET_BATTLE"
			],
			[
				"strs",
				"strsplit	(\"seperator\", \"text\", limit)"
			],
			[
				"GetItemIn",
				"GetItemIcon	(itemID)"
			],
			[
				"GetItem",
				"GetItem	()"
			],
			[
				"GetI",
				"GetItemInfo	(\"itemName\")"
			],
			[
				"S",
				"ShowJournal"
			],
			[
				"A",
				"ACCENTS"
			],
			[
				"Map",
				"MapFrame"
			],
			[
				"Proc",
				"ProcessContinents"
			],
			[
				"Add",
				"AddDropButton"
			],
			[
				"Max",
				"MaxQuality"
			],
			[
				"Blip",
				"BlipParent"
			],
			[
				"is",
				"isTitle"
			],
			[
				"f",
				"fori	for i,v in ipairs()"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Math/Sh.h",
			"settings":
			{
				"buffer_size": 1474,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Classes/SceneController.h",
			"settings":
			{
				"buffer_size": 2115,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 3048 files for \"cout <<\"\n\n/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Pdt.cpp:\n   17      shRotateFloatCoeffs(D, 2, in, out);\n   18  \n   19:     cout << out[0] << \", \" << out[1] << \", \" << out[2] << \", \" << out[3] << \"\\n\";\n   20  }\n   21  \n   ..\n   39      EulerAngles test;\n   40      v3ZyzEulerAngles(R, &test);\n   41:     cout << test.alpha << \" x \" << test.beta << \" x \" << test.gamma << \"\\n\";\n   42  \n   43      tryWigner(D, 1);\n   ..\n   51      EulerAngles test;\n   52      v3ZyzEulerAngles(R, &test);\n   53:     cout << test.alpha << \" x \" << test.beta << \" x \" << test.gamma << \"\\n\";\n   54  \n   55    	tryWigner(D, 1);\n   ..\n   63      EulerAngles test;\n   64      v3ZyzEulerAngles(R, &test);\n   65:     cout << test.alpha << \" x \" << test.beta << \" x \" << test.gamma << \"\\n\";\n   66  \n   67      tryWigner(D, 1);\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/ChangeLog:\n 7376  	  // print result; array will be written twice with full content,\n 7377  	  though with same ID\n 7378: 	  std::cout << buffer.str() << std::endl;\n 7379  	  \n 7380  	  // trying to read back node will print warnings about unmatched\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/applications/osgconv/osgconv.cpp:\n  699              return 1;\n  700          }\n  701:         std::cout << str << \" \" << nsimp << std::endl;\n  702          simplifyPercent = nsimp;\n  703          osg::notify( osg::INFO ) << \"Simplifying with percentage: \" << simplifyPercent << std::endl;\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/applications/osgversion/Contributors.cpp:\n  692      if (first.empty()) return EmptyNamePair;\n  693  \n  694: //  cout << \"first = \" << first << \" second = \" << second << endl;\n  695  \n  696      unsigned int last = first.size();\n  ...\n  914      }\n  915  \n  916:     cout << names.size() << \" Contributors:\" << endl << endl;\n  917  \n  918      if (printNumEntries)\n  919      {\n  920:         cout << \"Entries Firstname Surname\" << endl;\n  921:         cout << \"-------------------------\" << endl;\n  922          for (SortedNameMap::reverse_iterator sitr = sortedNames.rbegin(); sitr != sortedNames.rend(); ++sitr)\n  923          {\n  924:             cout << sitr->first << \"\\t\" << sitr->second.first << \" \" << sitr->second.second << endl;\n  925          }\n  926      }\n  927      else\n  928      {\n  929:         cout << \"Firstname Surname\" << endl;\n  930:         cout << \"-----------------\" << endl;\n  931          for (SortedNameMap::reverse_iterator sitr = sortedNames.rbegin(); sitr != sortedNames.rend(); ++sitr)\n  932          {\n  933:             cout << sitr->second.first << \" \" << sitr->second.second << endl;\n  934          }\n  935      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/applications/osgversion/osgversion.cpp:\n   50      if (arguments.read(\"-h\") || arguments.read(\"--help\"))\n   51      {\n   52:         cout << arguments.getApplicationUsage()->getCommandLineUsage() << endl;\n   53          arguments.getApplicationUsage()->write(cout, arguments.getApplicationUsage()->getCommandLineOptions());\n   54          return 1;\n   ..\n   57      if (arguments.read(\"--version-number\"))\n   58      {\n   59:         cout << osgGetVersion() << endl;\n   60          return 0;\n   61      }\n   ..\n   63      if (arguments.read(\"--major-number\"))\n   64      {\n   65:         cout << OPENSCENEGRAPH_MAJOR_VERSION << endl;\n   66          return 0;\n   67      }\n   ..\n   69      if (arguments.read(\"--minor-number\"))\n   70      {\n   71:         cout << OPENSCENEGRAPH_MINOR_VERSION << endl;\n   72          return 0;\n   73      }\n   ..\n   75      if (arguments.read(\"--patch-number\"))\n   76      {\n   77:         cout << OPENSCENEGRAPH_PATCH_VERSION << endl;\n   78          return 0;\n   79      }\n   ..\n   81      if (arguments.read(\"--soversion-number\") || arguments.read(\"--so-number\") )\n   82      {\n   83:         cout << osgGetSOVersion() << endl;\n   84          return 0;\n   85      }\n   ..\n   87      if (arguments.read(\"--openthreads-version-number\"))\n   88      {\n   89:         cout << OpenThreadsGetVersion() << endl;\n   90          return 0;\n   91      }\n   ..\n   93      if (arguments.read(\"--openthreads-major-number\"))\n   94      {\n   95:         cout << OPENTHREADS_MAJOR_VERSION << endl;\n   96          return 0;\n   97      }\n   ..\n   99      if (arguments.read(\"--openthreads-minor-number\"))\n  100      {\n  101:         cout << OPENTHREADS_MINOR_VERSION << endl;\n  102          return 0;\n  103      }\n  ...\n  105      if (arguments.read(\"--openthreads-patch-number\"))\n  106      {\n  107:         cout << OPENTHREADS_PATCH_VERSION << endl;\n  108          return 0;\n  109      }\n  ...\n  111      if (arguments.read(\"--openthreads-soversion-number\"))\n  112      {\n  113:         cout << OpenThreadsGetSOVersion() << endl;\n  114          return 0;\n  115      }\n  ...\n  118      if (arguments.read(\"Matrix::value_type\"))\n  119      {\n  120:         cout << ((sizeof(osg::Matrix::value_type) == 4) ? \"float\" : \"double\") << endl;\n  121          return 0;\n  122      }\n  ...\n  124      if (arguments.read(\"Plane::value_type\"))\n  125      {\n  126:         cout << ((sizeof(osg::Plane::value_type) == 4) ? \"float\" : \"double\") << endl;\n  127          return 0;\n  128      }\n  ...\n  130      if (arguments.read(\"BoundingSphere::value_type\"))\n  131      {\n  132:         cout << ((sizeof(osg::BoundingSphere::value_type) == 4) ? \"float\" : \"double\") << endl;\n  133          return 0;\n  134      }\n  ...\n  136      if (arguments.read(\"BoundingBox::value_type\"))\n  137      {\n  138:         cout << ((sizeof(osg::BoundingBox::value_type) == 4) ? \"float\" : \"double\") << endl;\n  139          return 0;\n  140      }\n  141  \n  142:     cout << osgGetLibraryName() << \" \" << osgGetVersion() << endl << endl;\n  143  \n  144  #ifdef BUILD_CONTRIBUTORS\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/applications/osgviewer/osgviewer.cpp:\n  139      if (!loadedModel)\n  140      {\n  141:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  142          return 1;\n  143      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/applications/present3D/present3D.cpp:\n  918                  bc.setBuffer(scratchPad.startPtr(), scratchPad.numBytes());\n  919                  \n  920:                 std::cout << \"bc.sync()\"<<scratchPad.numBytes()<<std::endl;\n  921  \n  922                  bc.sync();\n  ...\n  935                  if (cp.getMasterKilled()) \n  936                  {\n  937:                     std::cout << \"Received master killed.\"<<std::endl;\n  938                      // break out of while (!done) loop since we've now want to shut down.\n  939                      masterKilled = true;\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osganimationhardware/osganimationhardware.cpp:\n  201      if (!root) \n  202      {\n  203:         std::cout << psr.getApplicationName() <<\": No data loaded\" << std::endl;\n  204          return 1;\n  205      }\n  ...\n  256          }\n  257      }\n  258:     std::cout << \"created \" << xChar * yChar << \" instance\"  << std::endl;\n  259  \n  260  \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osganimationmakepath/osganimationmakepath.cpp:\n  224          else if(t > 8.0f) \n  225          {\n  226:             if(!countReported) std::cout << \"Created \" << _count << \" nodes.\" << std::endl;\n  227              countReported = true;\n  228          }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osganimationskinning/osganimationskinning.cpp:\n   79      {\n   80          float x = -1.0f + static_cast<float>(i) * step;\n   81:         std::cout << x << std::endl;\n   82          vertices->push_back (osg::Vec3 ( x, s, s));\n   83          vertices->push_back (osg::Vec3 ( x, -s, s));\n   ..\n  148      {\n  149          float val = (*array)[i][0];\n  150:         std::cout << val << std::endl;\n  151          if (val >= -1.0f && val <= 0.0f)\n  152              (*vim)[b0->getName()].push_back(osgAnimation::VertexIndexWeight(i,1.0f));\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osganimationtimeline/osganimationtimeline.cpp:\n   41      virtual void operator()(osgAnimation::Action* action, osgAnimation::ActionVisitor* nv)\n   42      {\n   43:         std::cout << \"sacrebleu, it scratches my nose, let me scratch it\" << std::endl;\n   44:         std::cout << \"process NoseBegin call back \" << action->getName() << std::endl << std::endl;\n   45      }\n   46  };\n   ..\n   50      virtual void operator()(osgAnimation::Action* action, osgAnimation::ActionVisitor* nv)\n   51      {\n   52:         std::cout << \"shhhrt shrrrrt shhhhhhrrrrt, haaa it's better\"<< std::endl;\n   53:         std::cout << \"process NoseEnd call back \" << action->getName() << std::endl << std::endl;\n   54      }\n   55  };\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osganimationviewer/AnimtkViewer:\n   51      bool list() \n   52      {\n   53:         std::cout << \"Animation List:\" << std::endl;\n   54          for(osgAnimation::AnimationMap::iterator it = _map.begin(); it != _map.end(); it++)\n   55:             std::cout << it->first << std::endl;\n   56          return true;\n   57      }\n   ..\n   61          if(_focus < _amv.size()) \n   62          {\n   63:             std::cout << \"Play \" << _amv[_focus] << std::endl;\n   64              _model->playAnimation(_map[_amv[_focus]].get());\n   65              return true;\n   ..\n   73          if(_focus < _amv.size()) \n   74          {\n   75:             std::cout << \"Stop \" << _amv[_focus] << std::endl;\n   76              _model->stopAnimation(_map[_amv[_focus]].get());\n   77              return true;\n   ..\n   83      {\n   84          _focus = (_focus + 1) % _map.size();\n   85:         std::cout << \"Current now is \" << _amv[_focus] << std::endl;\n   86          return true;\n   87      }\n   ..\n   90      {\n   91          _focus = (_map.size() + _focus - 1) % _map.size();\n   92:         std::cout << \"Current now is \" << _amv[_focus] << std::endl;\n   93          return true;\n   94      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osganimationviewer/AnimtkViewer.cpp:\n  131      if(!node)\n  132      {\n  133:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  134          return 1;\n  135      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osganimationviewer/AnimtkViewerKeyHandler.cpp:\n   35  void AnimtkKeyEventHandler::printUsage() const \n   36  {\n   37:     std::cout << (char) _actionKeys.find(Help)->second << \" for Help\" << std::endl;\n   38:     std::cout << (char) _actionKeys.find(List)->second << \" for List\" << std::endl;\n   39:     std::cout << (char) _actionKeys.find(Play)->second << \" for Play\" << std::endl;\n   40:     std::cout << (char) _actionKeys.find(Next)->second << \" for select Next item\" << std::endl;\n   41:     std::cout << (char) _actionKeys.find(Prev)->second << \" for select Previous item\" << std::endl;\n   42  }\n   43  \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgautocapture/osgautocapture.cpp:\n  122              if (!_fileName.empty())\n  123              {\n  124:                 std::cout << \"Writing to: \" << _fileName << std::endl;\n  125                  osgDB::writeImageFile(*_image, _fileName);\n  126              }\n  ...\n  291      if (!loadedModel) \n  292      {\n  293:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  294          return 1;\n  295      }\n  ...\n  379      while(!viewer.done() && pager->getRequestsInProgress())\n  380      {\n  381: //        std::cout <<pager->getRequestsInProgress()<<\" \";\n  382          viewer.updateTraversal();\n  383          viewer.renderingTraversals();\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgblendequation/osgblendequation.cpp:\n  147      if (!loadedModel)\n  148      {\n  149:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  150          return 1;\n  151      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgcamera/osgcamera.cpp:\n  201      if (argc<2) \n  202      {\n  203:         std::cout << argv[0] <<\": requires filename argument.\" << std::endl;\n  204          return 1;\n  205      }\n  ...\n  336          if (!loadedModel) \n  337          {\n  338:             std::cout << argv[0] <<\": No data loaded.\" << std::endl;\n  339              return 1;\n  340          }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgcluster/osgcluster.cpp:\n  517          \n  518          double original_fov = atan(tan(osg::DegreesToRadians(fovy)*0.5)*aspectRatio)*2.0;\n  519:         std::cout << \"setting lens perspective : original \"<<original_fov<<\"  \"<<fovy<<std::endl;\n  520          \n  521          fovy = atan(tan(osg::DegreesToRadians(camera_fov)*0.5)/aspectRatio)*2.0;\n  ...\n  524          viewer.getCamera()->getProjectionMatrixAsPerspective(fovy, aspectRatio,zNear, zFar);\n  525          original_fov = atan(tan(osg::DegreesToRadians(fovy)*0.5)*aspectRatio)*2.0;\n  526:         std::cout << \"setting lens perspective : new \"<<original_fov<<\"  \"<<fovy<<std::endl;\n  527      }\n  528  \n  ...\n  580                  bc.setBuffer(scratchPad._startPtr, scratchPad._numBytes);\n  581                  \n  582:                 std::cout << \"bc.sync()\"<<scratchPad._numBytes<<std::endl;\n  583  \n  584                  bc.sync();\n  ...\n  600                  if (cp->getMasterKilled()) \n  601                  {\n  602:                     std::cout << \"Received master killed.\"<<std::endl;\n  603                      // break out of while (!done) loop since we've now want to shut down.\n  604                      masterKilled = true;\n  ...\n  647          bc.sync();\n  648  \n  649:         std::cout << \"Broadcasting death.\"<<std::endl;\n  650  \n  651      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgcompositeviewer/osgcompositeviewer.cpp:\n  139      if (!scene)\n  140      {\n  141:         std::cout << argv[0] << \": requires filename argument.\" << std::endl;\n  142          return 1;\n  143      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgcopy/osgcopy.cpp:\n   49          inline void writeIndent() const \n   50          {\n   51:             for(int i=0;i<_indent;++i) std::cout << \" \";\n   52          }\n   53      \n   54          virtual osg::Referenced*     operator() (const osg::Referenced* ref) const\n   55          {\n   56:             writeIndent(); std::cout << \"copying Referenced \"<<ref<<std::endl;\n   57              moveIn();\n   58              osg::Referenced* ret_ref = CopyOp::operator()(ref);\n   ..\n   63          virtual osg::Object*         operator() (const osg::Object* obj) const\n   64          {\n   65:             writeIndent(); std::cout << \"copying Object \"<<obj;\n   66              if (obj) std::cout<<\" \"<<obj->className();\n   67              std::cout<<std::endl;\n   ..\n   74          virtual osg::Node*           operator() (const osg::Node* node) const\n   75          {\n   76:             writeIndent(); std::cout << \"copying Node \"<<node;\n   77              if (node) std::cout<<\" \"<<node->className()<<\" '\"<<node->getName()<<\"'\";\n   78              std::cout<<std::endl;\n   ..\n   85          virtual osg::Drawable*       operator() (const osg::Drawable* drawable) const\n   86          {\n   87:             writeIndent(); std::cout << \"copying Drawable \"<<drawable;\n   88              if (drawable) std::cout<<\" \"<<drawable->className();\n   89              std::cout<<std::endl;\n   ..\n   96          virtual osg::StateSet*       operator() (const osg::StateSet* stateset) const\n   97          {\n   98:             writeIndent(); std::cout << \"copying StateSet \"<<stateset;\n   99              if (stateset) std::cout<<\" \"<<stateset->className();\n  100              std::cout<<std::endl;\n  ...\n  107          virtual osg::StateAttribute* operator() (const osg::StateAttribute* attr) const\n  108          {\n  109:             writeIndent(); std::cout << \"copying StateAttribute \"<<attr;\n  110              if (attr) std::cout<<\" \"<<attr->className();\n  111              std::cout<<std::endl;\n  ...\n  118          virtual osg::Texture*        operator() (const osg::Texture* text) const\n  119          {\n  120:             writeIndent(); std::cout << \"copying Texture \"<<text;\n  121              if (text) std::cout<<\" \"<<text->className();\n  122              std::cout<<std::endl;\n  ...\n  129          virtual osg::Image*          operator() (const osg::Image* image) const\n  130          {\n  131:             writeIndent(); std::cout << \"copying Image \"<<image;\n  132              if (image) std::cout<<\" \"<<image->className();\n  133              std::cout<<std::endl;\n  ...\n  215      // in your own code you'd typically just use the basic osg::CopyOp something like\n  216      osg::ref_ptr<osg::Node> mycopy = dynamic_cast<osg::Node*>(rootnode->clone(osg::CopyOp::DEEP_COPY_ALL));\n  217:     std::cout << \"Doing a deep copy of scene graph\"<<std::endl;\n  218  \n  219      // note, we need the dyanmic_cast because MS Visual Studio can't handle covarient\n  ...\n  221      osg::ref_ptr<osg::Node> deep_copy = dynamic_cast<osg::Node*>(rootnode->clone(MyCopyOp(osg::CopyOp::DEEP_COPY_ALL)));\n  222      \n  223:     std::cout << \"----------------------------------------------------------------\"<<std::endl;\n  224  \n  225      // do a graph preserving deep copy.\n  226:     std::cout << \"Doing a graph preserving deep copy of scene graph nodes\"<<std::endl;\n  227      osg::ref_ptr<osg::Node> graph_copy = dynamic_cast<osg::Node*>(rootnode->clone(GraphCopyOp(osg::CopyOp::DEEP_COPY_NODES)));\n  228  \n  229  \n  230      // do a shallow copy.\n  231:     std::cout << \"Doing a shallow copy of scene graph\"<<std::endl;\n  232      osg::ref_ptr<osg::Node> shallow_copy = dynamic_cast<osg::Node*>(rootnode->clone(MyCopyOp(osg::CopyOp::SHALLOW_COPY)));\n  233  \n  ...\n  235      // write out the various scene graphs so that they can be browsed, either\n  236      // in an editor or using a graphics diff tool gdiff/xdiff/xxdiff.\n  237:     std::cout << std::endl << \"Writing out the original scene graph as 'original.osgt'\"<<std::endl;\n  238      osgDB::writeNodeFile(*rootnode,\"original.osgt\");\n  239  \n  240:     std::cout << std::endl << \"Writing out the graph preserving scene graph as 'graph_copy.osgt'\"<<std::endl;\n  241      osgDB::writeNodeFile(*graph_copy,\"graph_copy.osgt\");\n  242  \n  243:     std::cout << \"Writing out the deep copied scene graph as 'deep_copy.osgt'\"<<std::endl;\n  244      osgDB::writeNodeFile(*deep_copy,\"deep_copy.osgt\");\n  245  \n  246:     std::cout << \"Writing out the shallow copied scene graph as 'shallow_copy.osgt'\"<<std::endl;\n  247      osgDB::writeNodeFile(*shallow_copy,\"shallow_copy.osgt\");\n  248  \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgdatabaserevisions/osgdatabaserevisions.cpp:\n  133      if (!loadedModel) \n  134      {\n  135:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  136          return 1;\n  137      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgdelaunay/osgdelaunay.cpp:\n 1284      if (!loadedModel) \n 1285      {\n 1286:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n 1287          return 1;\n 1288      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgdirectinput/osgdirectinput.cpp:\n   63          {\n   64          case osgGA::GUIEventAdapter::KEYDOWN:\n   65:             std::cout << \"*** Key 0x\" << std::hex << ea.getKey() << std::dec << \" down ***\" << std::endl;\n   66              break;\n   67          case osgGA::GUIEventAdapter::KEYUP:\n   68:             std::cout << \"*** Key 0x\" << std::hex << ea.getKey() << std::dec << \" up ***\" << std::endl;\n   69              break;\n   70          case osgGA::GUIEventAdapter::USER:\n   ..\n   77                  {\n   78                      if ( js.rgbButtons[i] )\n   79:                         std::cout << \"*** Joystick Btn\" << i << \" = \" << (int)js.rgbButtons[i] << std::endl;\n   80                  }\n   81                  \n   82:                 if ( js.lX==0x0000 ) std::cout << \"*** Joystick X-\" << std::endl;\n   83:                 else if ( js.lX==0xffff ) std::cout << \"*** Joystick X+\" << std::endl;\n   84                  \n   85:                 if ( js.lY==0 ) std::cout << \"*** Joystick Y-\" << std::endl;\n   86:                 else if ( js.lY==0xffff ) std::cout << \"*** Joystick Y+\" << std::endl;\n   87              }\n   88              return true;\n   ..\n  101      if ( !model ) \n  102      {\n  103:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  104          return 1;\n  105      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgdistortion/osgdistortion.cpp:\n  669      if (!loadedModel)\n  670      {\n  671:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  672          return 1;\n  673      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgfpdepth/osgfpdepth.cpp:\n  165          case GL_FRAMEBUFFER_UNSUPPORTED_EXT:\n  166              if (!silent)\n  167:                 cout << \"Unsupported framebuffer format\\n\";\n  168              return false;\n  169          case GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT:\n  170              if (!silent)\n  171:                 cout << \"Framebuffer incomplete, missing attachment\\n\";\n  172              return false;\n  173          case GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT:\n  174              if (!silent)\n  175:                 cout << \"Framebuffer incomplete, duplicate attachment\\n\";\n  176              return false;\n  177          case GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT:\n  178              if (!silent)\n  179:                 cout << \"Framebuffer incomplete, attached images must have same dimensions\\n\";\n  180              return false;\n  181          case GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT:\n  182              if (!silent)\n  183:                 cout << \"Framebuffer incomplete, attached images must have same format\\n\";\n  184              return false;\n  185          case GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT:\n  186              if (!silent)\n  187:                 cout << \"Framebuffer incomplete, missing draw buffer\\n\";\n  188              return false;\n  189          case GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT:\n  190              if (!silent)\n  191:                 cout << \"Framebuffer incomplete, missing read buffer\\n\";\n  192              return false;\n  193          default:\n  ...\n  771      getPossibleConfigs(gc.get(), colorConfigs, depthConfigs, coverageConfigs);\n  772      int coverageSampleConfigs = (coverageConfigs.size() - 4) / 2;\n  773:     cout << \"color configs\\nname\\tbits\\n\";\n  774      for (BufferConfigList::const_iterator colorItr = colorConfigs.begin(),\n  775               colorEnd = colorConfigs.end();\n  ...\n  823      if (validConfigs.empty())\n  824      {\n  825:         cout << \"no valid frame buffer configurations!\\n\";\n  826          return 0;\n  827      }\n  828:     cout << \"valid frame buffer configurations:\\n\";\n  829      for (vector<FboConfig>::iterator itr = validConfigs.begin(),\n  830               end = validConfigs.end();\n  831           itr != end;\n  832           ++itr)\n  833:         cout << itr->name << \"\\n\";\n  834      gc->releaseContext();\n  835  \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgfxbrowser/osgfxbrowser.cpp:\n   96                  if (ea.getKey() == 'x') {\n   97                      osgDB::writeNodeFile(*ep_->getRoot(), \"osgfx_model.osgt\");\n   98:                     std::cout << \"written nodes to \\\"osgfx_model.osgt\\\"\\n\";\n   99                      return true;\n  100                  }\n  ...\n  123          setBackgroundColor(osg::Vec4(0.3f, 0.1f, 0.15f, 0.75f));\n  124  \n  125:         std::cout << \"INFO: available osgFX effects:\\n\";\n  126          osgFX::Registry::EffectMap emap = osgFX::Registry::instance()->getEffectMap();\n  127          for (osgFX::Registry::EffectMap::const_iterator i=emap.begin(); i!=emap.end(); ++i) {\n  128:             std::cout << \"INFO: \\t\" << i->first << \"\\n\";\n  129              osg::ref_ptr<osgFX::Effect> effect = static_cast<osgFX::Effect *>(i->second->cloneType());\n  130              _effects.push_back(effect.get());            \n  131          }\n  132  \n  133:         std::cout << \"INFO: \" << emap.size() << \" effect(s) ready.\\n\";\n  134  \n  135          if (!_effects.empty()) {\n  ...\n  344      if (!loadedModel)\n  345      {\n  346:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  347          return 1;\n  348      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osggameoflife/osggameoflife.cpp:\n  122     \n  123      if (!startIm) {\n  124:         std::cout << \"Could not load start image.\\n\";\n  125          return(1);\n  126      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osggeodemo/osggeodemo.cpp:\n   79      if (name == \"xpos\") {\n   80          return (val+speed*sin(heading));\n   81:         //    std::cout << \" nx \" << (*itr->getValue()) ;\n   82      } else if (name == \"ypos\") {\n   83          return (val+speed*cos(heading));\n   84:         //    std::cout << \" ny \" << (*itr->getValue()) ;\n   85      } else if (name == \"sped\") {\n   86          speed=(0.00025*(ghand->getMouseY()-300)); // (*itr->getValue());\n   ..\n   94          return ((ghand->getMouseY()-300)/200.0);\n   95      } else if (name == \"secint\" || name == \"minutehand\"|| name == \"hourhand\") {\n   96:     //    std::cout << \" updating \" << name << \" \" << val << std::endl;\n   97      }\n   98      return val;\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osggeometry/osggeometry.cpp:\n   64          osg::Vec3 normal = (v2-v1)^(v3-v2);\n   65          normal.normalize();\n   66:         std::cout << \"\\t(\"<<v1<<\") (\"<<v2<<\") (\"<<v3<<\") \"<<\") normal (\"<<normal<<\")\"<<std::endl;\n   67      }\n   68  };\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgkeyboardmouse/osgkeyboardmouse.cpp:\n  350      if (!loadedModel) \n  351      {\n  352:         std::cout << argv[0] <<\": No data loaded.\" << std::endl;\n  353          return 1;\n  354      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgmanipulator/osgmanipulator.cpp:\n  348      if (!loadedModel) \n  349      {\n  350:         //std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  351          //return 1;\n  352          loadedModel = createDemoScene(fixedSizeInScreen);\n  ...\n  365      osg::Timer_t end_tick = osg::Timer::instance()->tick();\n  366  \n  367:     std::cout << \"Time to load = \"<<osg::Timer::instance()->delta_s(start_tick,end_tick)<<std::endl;\n  368  \n  369  \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgmotionblur/osgmotionblur.cpp:\n  104      if (!loadedModel) \n  105      {\n  106:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  107          return 1;\n  108      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgmovie/osgmovie.cpp:\n  284                      tm += 0.1;\n  285                      (*itr)->setTimeMultiplier(tm);\n  286:                     std::cout << (*itr).get() << \" Increase speed rate \"<< (*itr)->getTimeMultiplier() << std::endl;\n  287                  }\n  288                  return true;\n  ...\n  297                      tm -= 0.1;\n  298                      (*itr)->setTimeMultiplier(tm);\n  299:                     std::cout << (*itr).get() << \" Decrease speed rate \"<< (*itr)->getTimeMultiplier() << std::endl;\n  300                  }\n  301                  return true;\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgmultiviewpaging/osgmultiviewpaging.cpp:\n   53       osgDB::DatabasePager::updateSceneGraph(frameStamp);\n   54       double d = osg::Timer::instance()->delta_m(start, osg::Timer::instance()->tick());\n   55:      std::cout << \"DatabasePager update took \" << d << \" ms. Length of active nodes = \" << _activePagedLODList->size() << std::endl;\n   56     }\n   57   }\n   ..\n   74      if (!scene)\n   75      {\n   76:         std::cout << argv[0] << \": requires filename argument.\" << std::endl;\n   77          return 1;\n   78      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgocclusionquery/osgocclusionquery.cpp:\n  526                      StatisticsVisitor sv;\n  527                      _node.accept( sv );\n  528:                     std::cout << \"osgOQ: Stats: numOQNs \" << sv.getNumOQNs() << \", numPased \" << sv.getNumPassed() << std::endl;\n  529                      return true;\n  530                  }\n  ...\n  761          else\n  762          {\n  763:             std::cout << arguments.getApplicationName() <<\": unable to load specified data.\" << std::endl;\n  764              return 1;\n  765          }\n  ...\n  770          if (!root)\n  771          {\n  772:             std::cout << arguments.getApplicationName() <<\": Failed to create stock scene.\" << std::endl;\n  773              return 1;\n  774          }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgoit/osgoit.cpp:\n  478      if (!loadedModel)\n  479      {\n  480:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  481          return 1;\n  482      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgplanets/osgplanets.cpp:\n  282          _rotateSpeedJupiter         *= _rotateSpeedFactor;\n  283          \n  284:         std::cout << \"rotateSpeed corrected by factor \" << _rotateSpeedFactor << std::endl;\n  285      }\n  286      \n  ...\n  294          _RorbitJupiter  *= _RorbitFactor;\n  295          \n  296:         std::cout << \"Rorbits corrected by factor \" << _RorbitFactor << std::endl;\n  297      }\n  298      \n  ...\n  308          _radiusJupiter  *= _radiusFactor;\n  309   \n  310:         std::cout << \"Radius corrected by factor \" << _radiusFactor << std::endl;\n  311      }\n  312      void printParameters();\n  ...\n  548  void SolarSystem::printParameters()\n  549  {\n  550:     std::cout << \"radiusSpace(\" << _radiusSpace << \")\" << std::endl;\n  551:     std::cout << \"radiusSun(\" << _radiusSun << \")\" << std::endl;\n  552:     std::cout << \"radiusMercury(\" << _radiusMercury << \")\" << std::endl;\n  553:     std::cout << \"radiusVenus(\" << _radiusVenus << \")\" << std::endl;\n  554:     std::cout << \"radiusEarth(\" << _radiusEarth << \")\" << std::endl;\n  555:     std::cout << \"radiusMoon(\" << _radiusMoon << \")\" << std::endl;\n  556:     std::cout << \"radiusMars(\" << _radiusMars << \")\" << std::endl;\n  557:     std::cout << \"radiusJupiter(\" << _radiusJupiter << \")\" << std::endl;\n  558  \n  559:     std::cout << \"RorbitMercury(\" << _RorbitMercury << \")\" << std::endl;\n  560:     std::cout << \"RorbitVenus(\" << _RorbitVenus << \")\" << std::endl;\n  561:     std::cout << \"RorbitEarth(\" << _RorbitEarth << \")\" << std::endl;\n  562:     std::cout << \"RorbitMoon(\" << _RorbitMoon << \")\" << std::endl;\n  563:     std::cout << \"RorbitMars(\" << _RorbitMars << \")\" << std::endl;\n  564:     std::cout << \"RorbitJupiter(\" << _RorbitJupiter << \")\" << std::endl;\n  565  \n  566:     std::cout << \"rotateSpeedMercury(\" << _rotateSpeedMercury << \")\" << std::endl;\n  567:     std::cout << \"rotateSpeedVenus(\" << _rotateSpeedVenus << \")\" << std::endl;\n  568:     std::cout << \"rotateSpeedEarthAndMoon(\" << _rotateSpeedEarthAndMoon << \")\" << std::endl;\n  569:     std::cout << \"rotateSpeedEarth(\" << _rotateSpeedEarth << \")\" << std::endl;\n  570:     std::cout << \"rotateSpeedMoon(\" << _rotateSpeedMoon << \")\" << std::endl;\n  571:     std::cout << \"rotateSpeedMars(\" << _rotateSpeedMars << \")\" << std::endl;\n  572:     std::cout << \"rotateSpeedJupiter(\" << _rotateSpeedJupiter << \")\" << std::endl;\n  573  \n  574:     std::cout << \"tiltEarth(\" << _tiltEarth << \")\" << std::endl;\n  575  \n  576:     std::cout << \"mapSpace(\" << _mapSpace << \")\" << std::endl;\n  577:     std::cout << \"mapSun(\" << _mapSun << \")\" << std::endl;\n  578:     std::cout << \"mapMercury(\" << _mapMercury << \")\" << std::endl;\n  579:     std::cout << \"mapVenus(\" << _mapVenus << \")\" << std::endl;\n  580:     std::cout << \"mapEarth(\" << _mapEarth << \")\" << std::endl;\n  581:     std::cout << \"mapEarthNight(\" << _mapEarthNight << \")\" << std::endl;\n  582:     std::cout << \"mapMoon(\" << _mapMoon << \")\" << std::endl;\n  583:     std::cout << \"mapMars(\" << _mapMars << \")\" << std::endl;\n  584:     std::cout << \"mapJupiter(\" << _mapJupiter << \")\" << std::endl;\n  585      \n  586:     std::cout << \"rotateSpeedFactor(\" << _rotateSpeedFactor << \")\" << std::endl;\n  587:     std::cout << \"RorbitFactor(\" << _RorbitFactor << \")\" << std::endl;\n  588:     std::cout << \"radiusFactor(\" << _radiusFactor << \")\" << std::endl;\n  589  }\n  590  \n  ...\n  681      if (arguments.read(\"-h\") || arguments.read(\"--help\"))\n  682      {\n  683:         std::cout << \"setup the following arguments: \" << std::endl;\n  684:         std::cout << \"\\t--radiusSpace: double\" << std::endl;\n  685:         std::cout << \"\\t--radiusSun: double\" << std::endl;\n  686:         std::cout << \"\\t--radiusMercury: double\" << std::endl;\n  687:         std::cout << \"\\t--radiusVenus: double\" << std::endl;\n  688:         std::cout << \"\\t--radiusEarth: double\" << std::endl;\n  689:         std::cout << \"\\t--radiusMoon: double\" << std::endl;\n  690:         std::cout << \"\\t--radiusMars: double\" << std::endl;\n  691:         std::cout << \"\\t--radiusJupiter: double\" << std::endl;\n  692          \n  693:         std::cout << \"\\t--RorbitMercury: double\" << std::endl;\n  694:         std::cout << \"\\t--RorbitVenus: double\" << std::endl;\n  695:         std::cout << \"\\t--RorbitEarth: double\" << std::endl;\n  696:         std::cout << \"\\t--RorbitMoon: double\" << std::endl;\n  697:         std::cout << \"\\t--RorbitMars: double\" << std::endl;\n  698:         std::cout << \"\\t--RorbitJupiter: double\" << std::endl;\n  699          \n  700:         std::cout << \"\\t--rotateSpeedMercury: double\" << std::endl;\n  701:         std::cout << \"\\t--rotateSpeedVenus: double\" << std::endl;\n  702:         std::cout << \"\\t--rotateSpeedEarthAndMoon: double\" << std::endl;\n  703:         std::cout << \"\\t--rotateSpeedEarth: double\" << std::endl;\n  704:         std::cout << \"\\t--rotateSpeedMoon: double\" << std::endl;\n  705:         std::cout << \"\\t--rotateSpeedMars: double\" << std::endl;\n  706:         std::cout << \"\\t--rotateSpeedJupiter: double\" << std::endl;\n  707  \n  708:         std::cout << \"\\t--tiltEarth: double\" << std::endl;\n  709          \n  710:         std::cout << \"\\t--mapSpace: string\" << std::endl;\n  711:         std::cout << \"\\t--mapSun: string\" << std::endl;\n  712:         std::cout << \"\\t--mapMercury: string\" << std::endl;\n  713:         std::cout << \"\\t--mapVenus: string\" << std::endl;\n  714:         std::cout << \"\\t--mapEarth: string\" << std::endl;\n  715:         std::cout << \"\\t--mapEarthNight: string\" << std::endl;\n  716:         std::cout << \"\\t--mapMoon: string\" << std::endl;\n  717:         std::cout << \"\\t--mapMars: string\" << std::endl;\n  718:         std::cout << \"\\t--mapJupiter: string\" << std::endl;\n  719          \n  720:         std::cout << \"\\t--rotateSpeedFactor: string\" << std::endl;\n  721:         std::cout << \"\\t--RorbitFactor: string\" << std::endl;\n  722:         std::cout << \"\\t--radiusFactor: string\" << std::endl;\n  723                          \n  724          return 1;\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgpoints/osgpoints.cpp:\n  151      if (!loadedModel) \n  152      {\n  153:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  154          return 1;\n  155      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgposter/osgposter.cpp:\n  303      if ( !scene )\n  304      {\n  305:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  306          return 1;\n  307      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgposter/PosterPrinter.cpp:\n  268              if ( _finalPoster.valid() )\n  269              {\n  270:                 std::cout << \"Writing final result to file...\" << std::endl;\n  271                  osgDB::writeImageFile( *_finalPoster, _outputPosterName );\n  272              }\n  ...\n  277              \n  278              _isFinishing = false;\n  279:             std::cout << \"Recording images finished.\" << std::endl;\n  280          }\n  281      }\n  ...\n  296              if ( _camera.valid() )\n  297              {\n  298:                 std::cout << \"Binding sub-camera \" << _currentRow << \"_\" << _currentColumn\n  299                            << \" to image...\" << std::endl;\n  300                  bindCameraToImage( _camera.get(), _currentRow, _currentColumn );\n  ...\n  331      _lastBindingFrame = fs->getFrameNumber();\n  332      \n  333:     std::cout << \"Dispatching callbacks to paged nodes... \"\n  334                << _visitor->inQueue() << std::endl;\n  335      return true;\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgprecipitation/osgprecipitation.cpp:\n  179      if (!loadedModel) \n  180      {\n  181:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  182          return 1;\n  183      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgQtWidgets/osgQtWidgets.cpp:\n  100          bool ok = false;\n  101          int val = QInputDialog::getInteger(this, \"Get integer\", \"Please enter an integer between 0 and pi\", 0, 0, 3, 1, &ok);\n  102:         std::cout << \"Ok was \" << (ok ? \"\" : \"not\") << \" pressed, val is \" << val << std::endl;\n  103      }\n  104  };\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgreflect/osgreflect.cpp:\n  346      if (!loadedModel) \n  347      {\n  348:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  349          return 1;\n  350      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgscreencapture/osgscreencapture.cpp:\n  729      if (!loadedModel) \n  730      {\n  731:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  732          return 1;\n  733      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgshadergen/osgshadergen.cpp:\n  145      if (!loadedModel) \n  146      {\n  147:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  148          return 1;\n  149      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgshadow/osgshadow.cpp:\n   66          double fovy, aspectRatio, zNear, zFar;\n   67          _camera->getProjectionMatrix().getPerspective(fovy, aspectRatio, zNear, zFar);\n   68:         std::cout << \"FOV is \" << fovy << std::endl;\n   69      }\n   70  \n   ..\n   94                  }\n   95  \n   96:                 std::cout << \"Setting FOV to \" << fovy << std::endl;\n   97                  _camera->getProjectionMatrix().makePerspective(fovy, aspectRatio, zNear, zFar);\n   98  \n   ..\n  756              if ( minNearSplit > 0 ) {\n  757                  pssm->setMinNearDistanceForSplits(minNearSplit);\n  758:                 std::cout << \"ParallelSplitShadowMap : setMinNearDistanceForSplits(\" << minNearSplit <<\")\" << std::endl;\n  759              }\n  760  \n  ...\n  763              if ( maxfardist > 0 ) {\n  764                  pssm->setMaxFarDistance(maxfardist);\n  765:                 std::cout << \"ParallelSplitShadowMap : setMaxFarDistance(\" << maxfardist<<\")\" << std::endl;\n  766              }\n  767  \n  ...\n  770              if ( maxfardist > 0 ) {\n  771                  pssm->setMoveVCamBehindRCamFactor(moveVCamFactor);\n  772:                 std::cout << \"ParallelSplitShadowMap : setMoveVCamBehindRCamFactor(\" << moveVCamFactor<<\")\" << std::endl;\n  773              }\n  774  \n  ...\n  935          viewer.getCamera()->getProjectionMatrix().getPerspective(fovy, aspectRatio, zNear, zFar);\n  936  \n  937:         std::cout << \"Setting FOV to \" << fov << std::endl;\n  938          viewer.getCamera()->getProjectionMatrix().makePerspective(fov, aspectRatio, zNear, zFar);\n  939      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgsidebyside/osgsidebyside.cpp:\n  236      if (argc<2) \n  237      {\n  238:         std::cout << argv[0] <<\": requires filename argument.\" << std::endl;\n  239          return 1;\n  240      }\n  ...\n  268      if (!loadedModel) \n  269      {\n  270:         std::cout << argv[0] <<\": No data loaded.\" << std::endl;\n  271          return 1;\n  272      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgsimplifier/osgsimplifier.cpp:\n  108      if (!loadedModel) \n  109      {\n  110:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  111          return 1;\n  112      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgslice/osgslice.cpp:\n   81      if( arguments.read( \"-h\" ) || arguments.read( \"--help\" ) )\n   82      {\n   83:         std::cout << \"Argumentlist:\" << std::endl;\n   84:         std::cout << \"\\t-o <filename> sets object to be loaded and sliced\" << std::endl;\n   85:         std::cout << \"\\t--slices <unsigned int> sets number of slices through the object\" << std::endl;\n   86:         std::cout << \"\\t--near <double> sets start for near clipping plane\" << std::endl;\n   87:         std::cout << \"\\t--far <double> sets start for far clipping plane\" << std::endl;\n   88          \n   89          return 1;\n   ..\n  107      if (!loadedModel) \n  108      {\n  109:         std::cout << \"No data loaded.\" << std::endl;\n  110          return 1;\n  111      }\n  ...\n  168      osg::Timer_t start_tick = osg::Timer::instance()->tick();\n  169      \n  170:     std::cout << \"radius: \" << bs.radius() << std::endl;\n  171      \n  172      unsigned int frameNum = 0;\n  ...\n  212          gc->swapBuffers();\n  213          \n  214:         std::cout << \"before readPixels: _r = \" << sp->_image->r() << std::endl;\n  215          \n  216          tmpImage->readPixels(static_cast<int>(sceneView->getViewport()->x()),\n  ...\n  220                               GL_RGBA,GL_UNSIGNED_BYTE);\n  221          \n  222: //        std::cout << \"vor copySubImage: _r = \" << sp->_image->r() << std::endl;\n  223          sp->_image->copySubImage( 0, 0, i, tmpImage );\n  224  \n  ...\n  228          tmpImageName = o.str();\n  229          osgDB::writeImageFile( *(sp->_image), tmpImageName );\n  230:         std::cout << \"Wrote image to file: \" << tmpImageName << std::endl;\n  231          */\n  232      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgstaticviewer/osgstaticviewer.cpp:\n  174      if (!loadedModel) \n  175      {\n  176:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  177          return 1;\n  178      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgstereoimage/osgstereoimage.cpp:\n  170      else\n  171      {\n  172: 	std::cout << \"Warning: Unable to load both image files, '\"<<image1<<\"' & '\"<<image2<<\"', required for stereo imaging.\"<<std::endl;\n  173  	return 0;\n  174      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgtexture3D/osgtexture3D.cpp:\n   49      if (!image_0 || !image_1 || !image_2 || !image_3)\n   50      {\n   51:         std::cout << \"Warning: could not open files.\"<<std::endl;\n   52          return new osg::StateSet;\n   53      }\n   ..\n   55      if (image_0->getPixelFormat()!=image_1->getPixelFormat() || image_0->getPixelFormat()!=image_2->getPixelFormat() || image_0->getPixelFormat()!=image_3->getPixelFormat())\n   56      {\n   57:         std::cout << \"Warning: image pixel formats not compatible.\"<<std::endl;\n   58          return new osg::StateSet;\n   59      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgunittests/osgunittests.cpp:\n   49      \n   50      \n   51:     std::cout << \"testFrustum\"<<f.getFrustum(c_left,c_right,c_bottom,c_top,c_zNear,c_zFar)<<std::endl;\n   52:     std::cout << \"  left = \"<<left<<\" compute \"<<c_left<<std::endl;\n   53:     std::cout << \"  right = \"<<right<<\" compute \"<<c_right<<std::endl;\n   54  \n   55:     std::cout << \"  bottom = \"<<bottom<<\" compute \"<<c_bottom<<std::endl;\n   56:     std::cout << \"  top = \"<<top<<\" compute \"<<c_top<<std::endl;\n   57  \n   58:     std::cout << \"  zNear = \"<<zNear<<\" compute \"<<c_zNear<<std::endl;\n   59:     std::cout << \"  zFar = \"<<zFar<<\" compute \"<<c_zFar<<std::endl;\n   60      \n   61:     std::cout << std::endl;\n   62  }\n   63  \n   ..\n   74      double c_zFar=0;\n   75  \n   76:     std::cout << \"testOrtho \"<< f.getOrtho(c_left,c_right,c_bottom,c_top,c_zNear,c_zFar) << std::endl;\n   77:     std::cout << \"  left = \"<<left<<\" compute \"<<c_left<<std::endl;\n   78:     std::cout << \"  right = \"<<right<<\" compute \"<<c_right<<std::endl;\n   79  \n   80:     std::cout << \"  bottom = \"<<bottom<<\" compute \"<<c_bottom<<std::endl;\n   81:     std::cout << \"  top = \"<<top<<\" compute \"<<c_top<<std::endl;\n   82  \n   83:     std::cout << \"  zNear = \"<<zNear<<\" compute \"<<c_zNear<<std::endl;\n   84:     std::cout << \"  zFar = \"<<zFar<<\" compute \"<<c_zFar<<std::endl;\n   85      \n   86:     std::cout << std::endl;\n   87  }\n   88  \n   ..\n   97      double c_zFar=0;\n   98  \n   99:     std::cout << \"testPerspective \"<< f.getPerspective(c_fovy,c_aspect,c_zNear,c_zFar) << std::endl;\n  100:     std::cout << \"  fovy = \"<<fovy<<\" compute \"<<c_fovy<<std::endl;\n  101:     std::cout << \"  aspect = \"<<aspect<<\" compute \"<<c_aspect<<std::endl;\n  102  \n  103:     std::cout << \"  zNear = \"<<zNear<<\" compute \"<<c_zNear<<std::endl;\n  104:     std::cout << \"  zFar = \"<<zFar<<\" compute \"<<c_zFar<<std::endl;\n  105      \n  106:     std::cout << std::endl;\n  107  }\n  108  \n  ...\n  115      mv.getLookAt(c_eye,c_center,c_up);\n  116      \n  117:     std::cout << \"testLookAt\"<<std::endl;\n  118:     std::cout << \"  eye \"<<eye<< \" compute \"<<c_eye<<std::endl;\n  119:     std::cout << \"  center \"<<center<< \" compute \"<<c_center<<std::endl;\n  120:     std::cout << \"  up \"<<up<< \" compute \"<<c_up<<std::endl;\n  121      \n  122:     std::cout << std::endl;\n  123      \n  124  }\n  ...\n  242  #endif\n  243  \n  244:     std::cout << std::endl << \"Starting testGetQuatFromMatrix, it can take a while ...\" << std::endl;\n  245  \n  246      osg::Timer_t tstart, tstop;\n  ...\n  322                              if (!lengthOK || !componentsOK)\n  323                              {\n  324:                                 std::cout << \"testGetQuatFromMatrix problem at: \\n\"\n  325                                        << \" r1=\" << rol1\n  326                                        << \" p1=\" << pit1\n  ...\n  329                                        << \" p2=\" << pit2\n  330                                        << \" y2=\" << yaw2 << \"\\n\";\n  331:                                 std::cout << \"quats:        \" << out_quat1 << \" length: \" << out_quat1.length() << \"\\n\";\n  332:                                 std::cout << \"mats and get: \" << out_quat2 << \" length: \" << out_quat2.length() << \"\\n\\n\";\n  333                              }\n  334                          }\n  ...\n  340      tstop = osg::Timer::instance()->tick();\n  341      double duration = osg::Timer::instance()->delta_s(tstart,tstop);\n  342:     std::cout << \"Time for testGetQuatFromMatrix with \" << count << \" iterations: \" << duration << std::endl << std::endl;\n  343  }\n  344  \n  ...\n  484      void run(void)\n  485      {\n  486:         std::cout << \"Entering thread ...\" <<_message<< std::endl;\n  487  \n  488          unsigned int count=0;\n  ...\n  498          }\n  499  \n  500:         std::cout << \"Leaving thread ...\" <<_message<< \" count=\"<<count<<std::endl;\n  501      }\n  502  \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osguserstats/osguserstats.cpp:\n  315      if (!loadedModel)\n  316      {\n  317:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n  318          return 1;\n  319      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgviewerFLTK/osgviewerFLTK.cpp:\n  134      if (argc<2)\n  135      {\n  136:         std::cout << argv[0] <<\": requires filename argument.\" << std::endl;\n  137          return 1;\n  138      }\n  ...\n  144      if (!loadedModel)\n  145      {\n  146:         std::cout << argv[0] <<\": No data loaded.\" << std::endl;\n  147          return 1;\n  148      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgviewerGLUT/osgviewerGLUT.cpp:\n  109      if (argc<2)\n  110      {\n  111:         std::cout << argv[0] <<\": requires filename argument.\" << std::endl;\n  112          return 1;\n  113      }\n  ...\n  117      if (!loadedModel)\n  118      {\n  119:         std::cout << argv[0] <<\": No data loaded.\" << std::endl;\n  120          return 1;\n  121      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgviewerGTK/osgviewerGTK.cpp:\n   22      GtkWidget* label = gtk_bin_get_child(GTK_BIN(widget));\n   23  \n   24:     std::cout << \"MENU: \" << gtk_label_get_label(GTK_LABEL(label)) << std::endl;\n   25  \n   26      return true;\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgviewerSDL/osgviewerSDL.cpp:\n   68      if (argc<2)\n   69      {\n   70:         std::cout << argv[0] <<\": requires filename argument.\" << std::endl;\n   71          return 1;\n   72      }\n   ..\n   85      if (!loadedModel)\n   86      {\n   87:         std::cout << argv[0] <<\": No data loaded.\" << std::endl;\n   88          return 1;\n   89      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgviewerWX/osgviewerWX.cpp:\n   31      if (argc<2)\n   32      {\n   33:         std::cout << wxString(argv[0]).mb_str() <<\": requires filename argument.\" << std::endl;\n   34          return false;\n   35      }\n   ..\n   73      if (!loadedModel)\n   74      {\n   75:         std::cout << argv[0] <<\": No data loaded.\" << std::endl;\n   76          return false;\n   77      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgwidgetmessagebox/osgwidgetmessagebox.cpp:\n  144              _frame->setScale(1.1f); //osg::Matrix::scale(2, 2, 1) * _frame->getMatrix());\n  145              _frame->update(); //osg::Matrix::scale(2, 2, 1) * _frame->getMatrix());\n  146:             std::cout << \"enter\" << std::endl;\n  147              return true;\n  148          }\n  ...\n  154              _frame->setScale(1.0f);\n  155              _frame->update();\n  156:             std::cout << \"leave\" << std::endl;\n  157              return true;\n  158          }\n  ...\n  500          {\n  501              _over = true;\n  502: //            std::cout << \"Enter\" << std::endl;\n  503              _width = _frame->getWidth();\n  504              _height = _frame->getHeight();\n  ...\n  511          {\n  512              _over = false;\n  513: //            std::cout << \"Leave\" << std::endl;\n  514  //             _frame->resize(_width, _height);\n  515              _motionLeave.reset();\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgwidgetwindow/osgwidgetwindow.cpp:\n   16  // Here we create (and later demonstrate) the use of a simple function callback.\n   17  bool windowClicked(osgWidget::Event& ev) {\n   18:     std::cout << \"windowClicked: \" << ev.getWindow()->getName() << std::endl;\n   19  \n   20      if(ev.getData()) {\n   21          std::string* s = static_cast<std::string*>(ev.getData());\n   22  \n   23:         std::cout << \"This is data attached to the event: \" << *s << std::endl;\n   24      }\n   25  \n   ..\n   40  struct Object {\n   41      bool windowClicked(osgWidget::Event& ev) {\n   42:         std::cout << \"Object::windowClicked \" << ev.getWindow()->getName() << std::endl;\n   43  \n   44          return true;\n   ..\n   53  \n   54      virtual bool operator()(osgWidget::Event& ev) {\n   55:         std::cout << \"here\" << std::endl;\n   56          \n   57          return false;\n   ..\n  159      // Here we demonstrate the use of osgWidget/io_utils. This is really only useful for\n  160      // debugging at the moment.\n  161:     // std::cout << *box << std::endl << *boxCopy << std::endl;\n  162  \n  163      // Setup our OSG objects for our scene; note the use of the utility function\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/examples/osgwindows/osgwindows.cpp:\n   38      if (!loadedModel) \n   39      {\n   40:         std::cout << arguments.getApplicationName() <<\": No data loaded\" << std::endl;\n   41          return 1;\n   42      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/OpenThreads/qt/QtThread.cpp:\n  391  {\n  392      QtThreadPrivateData* pd = static_cast<QtThreadPrivateData*>(_prvData);\n  393:     std::cout << \"Thread \"<< pd->getMasterThread() <<\" priority: \";\n  394      \n  395      switch (pd->threadPriority)\n  396      {\n  397      case Thread::THREAD_PRIORITY_MAX:\n  398:         std::cout << \"MAXIMAL\" << std::endl;\n  399          break;\n  400      case Thread::THREAD_PRIORITY_HIGH:\n  401:         std::cout << \"HIGH\" << std::endl;\n  402          break;\n  403      case Thread::THREAD_PRIORITY_DEFAULT:\n  404      case Thread::THREAD_PRIORITY_NOMINAL:\n  405:         std::cout << \"NORMAL\" << std::endl;\n  406          break;\n  407      case Thread::THREAD_PRIORITY_LOW:\n  408:         std::cout << \"LOW\" << std::endl;\n  409          break;\n  410      case Thread::THREAD_PRIORITY_MIN:\n  411:         std::cout << \"MINIMAL\" << std::endl;\n  412          break;\n  413      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osg/CollectOccludersVisitor.cpp:\n  169              {\n  170                  // need to test occluder against view frustum.\n  171:                 //std::cout << \"    adding in Occluder\"<<std::endl;\n  172                  _occluderSet.insert(svo);\n  173              }\n  174              else\n  175              {\n  176:                 //std::cout << \"    rejecting Occluder as its volume is too small \"<<svo.getVolume()<<std::endl;\n  177              }\n  178          }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osg/CullStack.cpp:\n  123  //     const osg::Polytope& polytope = _modelviewCullingStack.back()->getFrustum();\n  124  //     const osg::Polytope::PlaneList& pl = polytope.getPlaneList();\n  125: //     std::cout <<\"new cull stack\"<<std::endl;\n  126  //     for(osg::Polytope::PlaneList::const_iterator pl_itr=pl.begin();\n  127  //         pl_itr!=pl.end();\n  128  //         ++pl_itr)\n  129  //     {\n  130: //         std::cout << \"    plane \"<<*pl_itr<<std::endl;\n  131  //     }\n  132  \n  ...\n  177          ++itr)\n  178      {\n  179:         //std::cout << \" ** testing occluder\"<<std::endl;\n  180          if (itr->matchProjectionMatrix(*matrix))\n  181          {\n  182:             //std::cout << \" ** activating occluder\"<<std::endl;\n  183              cullingSet.addOccluder(*itr);\n  184          }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osg/Notify.cpp:\n  183          else if(stringOSGNOTIFYLEVEL.find(\"DEBUG\")!=std::string::npos)      g_NotifyLevel=osg::DEBUG_INFO;\n  184          else if(stringOSGNOTIFYLEVEL.find(\"INFO\")!=std::string::npos)       g_NotifyLevel=osg::INFO;\n  185:         else std::cout << \"Warning: invalid OSG_NOTIFY_LEVEL set (\"<<stringOSGNOTIFYLEVEL<<\")\"<<std::endl;\n  186   \n  187      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osg/Quat.cpp:\n  366      osg::Vec3 zAxis(0,0,1);\n  367      \n  368:     cout << \"heading = \"<<heading<<\"  pitch = \"<<pitch<<\"  roll = \"<<roll<<endl;\n  369  \n  370:     cout <<\"q_m = \"<<q_m;\n  371:     cout <<\"xAxis*q_m = \"<<xAxis*q_m << endl;\n  372:     cout <<\"yAxis*q_m = \"<<yAxis*q_m << endl;\n  373:     cout <<\"zAxis*q_m = \"<<zAxis*q_m << endl;\n  374      \n  375      osg::Matrix r_m = osg::Matrix::rotate(roll,0.0,1.0,0.0)*\n  ...\n  377                        osg::Matrix::rotate(-heading,0.0,0.0,1.0);\n  378                        \n  379:     cout << \"r_m = \"<<r_m;\n  380:     cout <<\"xAxis*r_m = \"<<xAxis*r_m << endl;\n  381:     cout <<\"yAxis*r_m = \"<<yAxis*r_m << endl;\n  382:     cout <<\"zAxis*r_m = \"<<zAxis*r_m << endl;\n  383      \n  384:     cout << endl<<\"*****************************************\" << endl<< endl;\n  385      \n  386  }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osg/ShadowVolumeOccluder.cpp:\n  296          }\n  297  \n  298:         //std::cout << \"final volume = \"<<_volume<<std::endl;\n  299  \n  300          return true;\n  ...\n  321  bool ShadowVolumeOccluder::contains(const BoundingSphere& bound)\n  322  {\n  323:     //std::cout << \"Sphere testing occluder \"<<this<<\" mask=\"<<_occluderVolume.getCurrentMask();\n  324      if (_occluderVolume.containsAllOf(bound))\n  325      {\n  ...\n  330              if (itr->contains(bound))\n  331              {\n  332:                 //std::cout << \" - not in occluder\"<<std::endl;\n  333                  return false;\n  334              }\n  335          }\n  336:         //std::cout << \" - in occluder ******\"<<std::endl;\n  337          return true;\n  338      }\n  339:     //std::cout << \" - not in occluder\"<<std::endl;\n  340      return false;\n  341  }\n  ...\n  343  bool ShadowVolumeOccluder::contains(const BoundingBox& bound)\n  344  {\n  345:     //std::cout << \"Box testing occluder \"<<this<<\" mask=\"<<_occluderVolume.getCurrentMask();\n  346      if (_occluderVolume.containsAllOf(bound))\n  347      {\n  ...\n  352              if (itr->contains(bound))\n  353              {\n  354:                 //std::cout << \" + not in occluder\"<<std::endl;\n  355                  return false;\n  356              }\n  357          }\n  358:         //std::cout << \"+ in occluder ********\"<<std::endl;\n  359          return true;\n  360      }\n  361:     //std::cout << \"+ not in occluder\"<<std::endl;\n  362      return false;\n  363  }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgAnimation/Animation.cpp:\n  119          else if (t > _originalDuration)\n  120              t = fmod(t, _originalDuration);\n  121:         //      std::cout << \"t \" << t << \" duration \" << _duration << std::endl;\n  122          break;\n  123      case PPONG: \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgAnimation/BasicAnimationManager.cpp:\n   55      _animationsPlaying[priority].push_back(pAnimation);\n   56      // for debug\n   57:     //std::cout << \"player Animation \" << pAnimation->getName() << \" at \" << _lastUpdate << std::endl;\n   58      pAnimation->setStartTime(_lastUpdate);\n   59      pAnimation->setWeight(weight);\n   ..\n   98              {\n   99                  // debug\n  100:                 // std::cout << list[i]->getName() << \" finished at \" << time << std::endl;\n  101                  toremove.push_back(i);\n  102              } else \n  103              {\n  104                  // debug\n  105:                 //std::cout << list[i]->getName() << \" updated\" << std::endl;\n  106              }\n  107          }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgAnimation/StatsHandler.cpp:\n  691  void StatAction::setAlpha(float v)\n  692  {\n  693:     std::cout << this << \" color alpha \" << v << std::endl;\n  694      StatsGraph* gfx = dynamic_cast<StatsGraph*>(_graph.get());\n  695      osg::Vec4 color = _textLabel->getColor();\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgDB/SharedStateManager.cpp:\n   79  \n   80  //    osg::Timer_t end_tick = timer.tick();\n   81: //     std::cout << \"SHARING TIME = \"<<timer.delta_m(start_tick,end_tick)<<\"ms\"<<std::endl;\n   82: //     std::cout << \"   _sharedStateSetList.size() = \"<<_sharedStateSetList.size()<<std::endl;\n   83: //     std::cout << \"   _sharedTextureList.size() = \"<<_sharedTextureList.size()<<std::endl;\n   84  }\n   85  \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgGA/StateSetManipulator.cpp:\n  182  //    osg::ref_ptr< osg::Texture > tex = dynamic_cast<osg::Texture*>\n  183  //        ( _stateset->getAttribute( osg::StateAttribute::TEXTURE ) );\n  184: //    cout << tex->numTextureUnits() << endl;\n  185  \n  186      unsigned int mode = osg::StateAttribute::OVERRIDE|osg::StateAttribute::OFF;\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/3ds/ReaderWriter3DS.cpp:\n  303  void print(Lib3dsMatrix matrix,int level)\n  304  {\n  305:     pad(level); cout << matrix[0][0] <<\" \"<< matrix[0][1] <<\" \"<< matrix[0][2] <<\" \"<< matrix[0][3] << endl;\n  306:     pad(level); cout << matrix[1][0] <<\" \"<< matrix[1][1] <<\" \"<< matrix[1][2] <<\" \"<< matrix[1][3] << endl;\n  307:     pad(level); cout << matrix[2][0] <<\" \"<< matrix[2][1] <<\" \"<< matrix[2][2] <<\" \"<< matrix[2][3] << endl;\n  308:     pad(level); cout << matrix[3][0] <<\" \"<< matrix[3][1] <<\" \"<< matrix[3][2] <<\" \"<< matrix[3][3] << endl;\n  309  }\n  310  void print(Lib3dsMesh *mesh,int level)\n  ...\n  312      if (mesh)\n  313      {\n  314:         pad(level); cout << \"mesh name \" << mesh->name  << endl;\n  315          print(mesh->matrix,level);\n  316      }\n  317      else\n  318      {\n  319:         pad(level); cout << \"no mesh \" << endl;\n  320      }\n  321  }\n  ...\n  324      if (user)\n  325      {\n  326:         pad(level); cout << \"user data\" << endl;\n  327          //print(user->mesh,level+1);\n  328      }\n  329      else\n  330      {\n  331:         pad(level); cout << \"no user data\" << endl;\n  332      }\n  333  }\n  ...\n  337      if (object)\n  338      {\n  339:         pad(level); cout << \"objectdata instance [\" << object->instance_name << \"]\" << endl;\n  340:         pad(level); cout << \"pivot     \" << object->pivot[0] <<\" \"<< object->pivot[1] <<\" \"<< object->pivot[2] << endl;\n  341:         pad(level); cout << \"pos       \" << object->pos[0] <<\" \"<< object->pos[1] <<\" \"<< object->pos[2] << endl;\n  342:         pad(level); cout << \"scl       \" << object->scl[0] <<\" \"<< object->scl[1] <<\" \"<< object->scl[2] << endl;\n  343:         pad(level); cout << \"rot       \" << object->rot[0] <<\" \"<< object->rot[1] <<\" \"<< object->rot[2] <<\" \"<< object->rot[3] << endl;\n  344      }\n  345      else\n  346      {\n  347:         pad(level); cout << \"no object data\" << endl;\n  348      }\n  349  }\n  ...\n  352  {\n  353  \n  354:     pad(level); cout << \"node name [\" << node->name << \"]\" << endl;\n  355:     pad(level); cout << \"node id    \" << node->user_id << endl;\n  356:     pad(level); cout << \"node parent id \" << (node->parent ? static_cast<int>(node->parent->user_id) : -1) << endl;\n  357:     pad(level); cout << \"node matrix:\" << endl;\n  358      print(node->matrix,level+1);\n  359  \n  360      if (node->type == LIB3DS_NODE_MESH_INSTANCE)\n  361      {\n  362:         pad(level); cout << \"mesh instance data:\" << endl;\n  363          print(reinterpret_cast<Lib3dsMeshInstanceNode *>(node),level+1);\n  364      }\n  365      else\n  366      {\n  367:         pad(level); cout << \"node is not a mesh instance (not handled)\" << endl;\n  368      }\n  369  \n  ...\n  608      {\n  609          // no mesh for this node - probably a camera or something of that persuasion\n  610:         //cout << \"no mesh for object \" << node->name << endl;\n  611          return group; // we have no mesh, but we might have children\n  612      }\n  ...\n  769      {\n  770          int level=0;\n  771:         std::cout << \"NODE TRAVERSAL of 3ds file \"<<f->name<<std::endl;\n  772          for(Lib3dsNode *node=f->nodes; node; node=node->next)\n  773          {\n  774              print(node,level+1);\n  775          }\n  776:         std::cout << \"MESH TRAVERSAL of 3ds file \"<<f->name<<std::endl;\n  777          for (int imesh=0; imesh<f->nmeshes; ++imesh){\n  778              print(f->meshes[imesh],level+1);\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/bvh/ReaderWriterBVH.cpp:\n  242  \n  243  #if 0\n  244:         std::cout << \"Bone number: \" << _joints.size() << \"\\n\";\n  245          for ( unsigned int i=0; i<_joints.size(); ++i )\n  246          {\n  247              JointNode node = _joints[i];\n  248:             std::cout << \"Bone\" << i << \" \" << node.first->getName() << \": \";\n  249:             std::cout << std::hex << node.second << std::dec << \"; \";\n  250              if ( node.first->getNumParents() )\n  251:                 std::cout << \"Parent: \" << node.first->getParent(0)->getName();\n  252:             std::cout << \"\\n\";\n  253          }\n  254  #endif\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/cfg/CameraConfig.h:\n   35  namespace osgProducer {\n   36  \n   37: #define notImplemented {std::cout << __FILE__ << \" \" << __LINE__ << std::endl;}\n   38    class CameraGroup : public osg::Referenced {\n   39    public:\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/cfg/ReaderWriterCFG.cpp:\n   93  {\n   94      osg::ref_ptr<CameraConfig> config = new CameraConfig;\n   95:     //std::cout << \"Parse file \" << file << std::endl;\n   96      config->parseFile(file);\n   97  \n   ..\n  133          }\n  134  \n  135:         // std::cout << rs->getWindowName() << \" \" << rs->getWindowOriginX() << \" \" << rs->getWindowOriginY() << \" \" << rs->getWindowWidth() << \" \" << rs->getWindowHeight() << std::endl;\n  136  \n  137          if (gc.valid())\n  ...\n  164  \n  165              #if 0\n  166:             std::cout << \"Matrix Projection \" << projection << std::endl;\n  167:             std::cout << \"Matrix Projection master \" << _view->getCamera()->getProjectionMatrix() << std::endl;\n  168              // will work only if it's a post multyply in the producer camera\n  169:             std::cout << \"Matrix View \" << view << std::endl;\n  170:             std::cout << _view->getCamera()->getProjectionMatrix() * offsetProjection << std::endl;\n  171              #endif\n  172          }\n  ...\n  179      }\n  180  \n  181:     // std::cout << \"done\" << std::endl;\n  182      return _view.release();\n  183  }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/cfg/RenderSurface.cpp:\n  160      while (isRunning())\n  161      {\n  162:         //std::cout << \"waiting for RenderSurface to cancel\"<<std::endl;\n  163          OpenThreads::Thread::YieldCurrentThread();\n  164      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/cfg/VisualChooser.cpp:\n  478              \n  479                  // should we report an message that we're relaxing constraints here?\n  480:                 // std::cout << \"Popping attributes\"<<std::endl;\n  481  \n  482              va.pop_back(); // Pop the NULL terminator\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/dae/daeWriter.h:\n  243        bool operator()(const osg::ref_ptr<osg::StateSet>& ss1, const osg::ref_ptr<osg::StateSet>& ss2) const\n  244      {\n  245:       //std::cout << \"CompareStateSet: \" << ss1->compare(*ss2, false) << \" \" << ss1 << \" \" << ss2 << std::endl;\n  246        return ss1->compare(*ss2, true) < 0;\n  247      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/dxf/dxfEntity.cpp:\n  362      sc->addLine(getLayer(), _color, _b, _a);\n  363  //    static long lcount = 0;\n  364: //    std::cout << ++lcount << \" \";\n  365  //    sc->ocs_clear();\n  366  }\n  ...\n  668              vlist.push_back(_vertices[i]->getVertex());\n  669          if (_flag & 1) {\n  670: //            std::cout << \"line loop \" << _vertices.size() << std::endl;\n  671              sc->addLineLoop(getLayer(), _color, vlist);\n  672          } else {\n  673: //            std::cout << \"line strip \" << _vertices.size() << std::endl;\n  674              sc->addLineStrip(getLayer(), _color, vlist);\n  675          }\n  ...\n  730      sc->ocs(m);\n  731      if (_flag & 1) {\n  732: //        std::cout << \"lwpolyline line loop \" << _vertices.size() << std::endl;\n  733          sc->addLineLoop(getLayer(), _color, _vertices);\n  734      } else {\n  735: //        std::cout << \"lwpolyline line strip \" << _vertices.size() << std::endl;\n  736          sc->addLineStrip(getLayer(), _color, _vertices);\n  737      }\n  ...\n 1022      } else if (_seqend && cv._groupCode == 0 && s == \"SEQEND\") {\n 1023          _seqend = false;\n 1024: //        cout << \"... off\" << endl;\n 1025      } else if (_entity) {\n 1026          _entity->assign(dxf, cv);\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/dxf/dxfEntity.h:\n  332          if (_entity) {\n  333              _entityList.push_back(_entity);\n  334:         //    std::cout << \"entity \" << s << std::endl;\n  335          }\n  336      }\n  ...\n  345              return be->create();\n  346          else {\n  347:             std::cout << \" no \" << s << std::endl;\n  348              return NULL;\n  349          }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/dxf/dxfFile.cpp:\n   95      } else if (cv._groupCode == 2 && _isNewSection) {\n   96          _isNewSection = false;\n   97: //        std::cout << \"Reading section \" << s << std::endl;\n   98          if (s ==\"HEADER\") {\n   99              _header = new dxfHeader;\n  ...\n  113      } else if (_isNewSection) {\n  114          // problem. a 0/SECTION should be followed by a 2/SECTION_NAME\n  115:         std::cout << \"No groupcode for changing section \" << cv._groupCode << \" value: \" << s << std::endl;\n  116          return -1;\n  117      } else if (_current.get()) {\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/dxf/dxfReader.cpp:\n   80  {\n   81      if (!inSuccess)\n   82:         cout << \"Error converting line \" << _lineCount << \" to type \" << type << endl;\n   83      return inSuccess;\n   84  }\n   ..\n  174      _ifs.open(fileName.c_str(), ios::binary); // found mac autocad with \\r delimiters\n  175      if (!_ifs) {\n  176:             cout << \" Can't open \" << fileName << endl;\n  177              return false;\n  178      }\n  ...\n  183      string sentinel(buf);\n  184      if (trim(sentinel) == \"AutoCAD Binary DXF\") {\n  185:         cout << \" Binary DXF not supported. For now. Come back soon.\" << endl;\n  186          return false;\n  187      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/freetype/FreeTypeFont.cpp:\n  404  #endif\n  405      \n  406: //    cout << \"      in getGlyph() implementation=\"<<this<<\"  \"<<_filename<<\"  facade=\"<<_facade<<endl;\n  407  \n  408      return glyph.release();\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/geo/geoActions.cpp:\n   50      if (in && out && op) {\n   51          (*out)=op(*in,acon.get());\n   52:         //    std::cout << \" math sum \" << out<< \" \" << (*out) << \" \" << in <<\" \" << (*in) << std::endl;\n   53      }\n   54  }\n   ..\n  119          double var3=bcon.get();\n  120          *out=op(*in,getconstant(),var3);\n  121:         //std::cout << \" ar3 sum \" << out<< \" \" << (*out) << \" con \" << getconstant() <<\" b: \" << bcon.get() << std::endl;\n  122      }\n  123  }\n  ...\n  356              break;\n  357          case DB_DSK_ROTATE_ACTION:\n  358:             //std::cout << node->getName() << \" v: \" << getVar() << \" rotion \" << DEG2RAD(getValue()) << std::endl;\n  359              mtr->preMult( osg::Matrix::translate(-centre)* \n  360                  osg::Matrix::rotate(DEG2RAD(getValue()),axis)* // nov 2003 negative rotation convention\n  ...\n  429                  break;\n  430              case DB_DSK_ROTATE_ACTION:\n  431:                 //std::cout << dr->getName() << \" v: \" << getVar() << \" rotion \" << DEG2RAD(getValue()) << std::endl;\n  432                  *mtr = (*mtr)*osg::Matrix::translate(-getCentre())* \n  433                      osg::Matrix::rotate(DEG2RAD(getValue()),getAxis())* \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/geo/ReaderWriterGEO.cpp:\n  133          ++itr) {// for each user var\n  134              double vv=uvarupdate(t, itr->getVal(), itr->getName());\n  135:             //        std::cout << \" updatee \" << itr->getName() << \" \" << vv << \" \" << itr->getVar() << std::endl;\n  136              itr->setVal(vv);\n  137:             //        vv=itr->getVal(); std::cout << \" result \" << itr->getName() << \" \" << vv << std::endl;\n  138          }\n  139      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/normals/Normals.cpp:\n  236  void Normals::_printPrimitiveType( osg::PrimitiveSet *pset )\n  237  {\n  238:     std::cout << (\n  239              pset->getMode() == PrimitiveSet::POINTS ? \"POINTS\" :\n  240              pset->getMode() == PrimitiveSet::LINES ? \"LINES\" :\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/obj/OBJWriterNodeVisitor.h:\n  129              bool operator()(const osg::ref_ptr<osg::StateSet>& ss1, const osg::ref_ptr<osg::StateSet>& ss2) const\n  130              {\n  131:                 //std::cout << \"CompareStateSet: \" << ss1->compare(*ss2, false) << \" \" << ss1 << \" \" << ss2 << std::endl;\n  132                  return ss1->compare(*ss2, true) < 0;\n  133              }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/OpenFlight/RecordInputStream.cpp:\n   63          {\n   64              for (int i=0; i<document.level(); i++)\n   65:                 cout << \"   \";\n   66:             cout << \"opcode=\" << opcode << \" size=\" << size;\n   67:             if (prototype) std::cout << \" \" << typeid(*prototype).name();\n   68:             cout << endl;\n   69          }\n   70  #endif\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/txp/ReaderWriterTXP.cpp:\n  102          archive->ReadSubArchive( y, x, endian);\n  103  \n  104: //    std::cout << \"Attempted \" << x << \" \" << y << std::endl;\n  105          \n  106          TXPArchive::TileInfo info;\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/txp/TileMapper.cpp:\n  166          // return true as a fallback right now.\n  167  #if 0\n  168:         std::cout << \"TileMapper::isTileNeighbourALowerLODLevel() Not found tile in map,\" << std::endl;\n  169:         std::cout << \"    LOD=\" << tid.lod << \"  X=\" << tid.x << \"  Y=\" << tid.y << std::endl;\n  170  #endif\n  171          return true;\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/vrml/ConvertToVRML.cpp:\n   77    ToVRML toVrml(filename, options);\n   78  \n   79:   //cout << root.className() << endl;\n   80    osg::Node* aRoot = transformNode(root);\n   81  \n   ..\n  131      std::string opt = options->getOptionString();\n  132      if (opt.find(\"convertTextures=0\") != std::string::npos) {\n  133:       //std::cout << \"Read XML stream\" << std::endl;\n  134        _textureMode = COPY_TEXTURE;\n  135  \n  ...\n  233  /////////////////////////////////////////////////////////////////////////\n  234  void ToVRML::apply(osg::Geode& node) {\n  235:   //cout << \"Geode\" << endl;\n  236  \n  237    pushStateSetStack(node.getStateSet());\n  ...\n  296    }\n  297  \n  298:   //std::cout << \"primitives type : Points \" << modePoints << \" Line \" << modeLines << \" Face \" << modeFaces << std::endl;\n  299  \n  300    if (modePoints > 0) {\n  ...\n  339  \n  340          } else if (type == osg::PrimitiveSet::DrawArraysPrimitiveType) {\n  341:           //std::cout << \"osg::PrimitiveSet::DrawArraysPrimitiveType\" << std::endl;\n  342            osg::ref_ptr < osg::DrawArrays > dra = dynamic_cast<osg::DrawArrays*> (geom->getPrimitiveSet(p));\n  343  \n  ...\n  370  \n  371          } else if (type == osg::PrimitiveSet::DrawElementsUBytePrimitiveType) {\n  372:           //std::cout << \"osg::PrimitiveSet::DrawElementsUBytePrimitiveType\" << std::endl;\n  373  \n  374            osg::ref_ptr < osg::DrawElementsUByte > drui = dynamic_cast<osg::DrawElementsUByte*> (geom->getPrimitiveSet(p));\n  ...\n  377  \n  378          } else if (type == osg::PrimitiveSet::DrawElementsUShortPrimitiveType) {\n  379:           //std::cout << \"osg::PrimitiveSet::DrawElementsUShortPrimitiveType\" << std::endl;\n  380  \n  381            osg::ref_ptr < osg::DrawElementsUShort > drui = dynamic_cast<osg::DrawElementsUShort*> (geom->getPrimitiveSet(p));\n  ...\n  384  \n  385          } else if (type == osg::PrimitiveSet::DrawElementsUIntPrimitiveType) {\n  386:           //std::cout << \"osg::PrimitiveSet::DrawElementsUIntPrimitiveType\" << std::endl;\n  387  \n  388            osg::ref_ptr < osg::DrawElementsUInt > drui = dynamic_cast<osg::DrawElementsUInt*> (geom->getPrimitiveSet(p));\n  ...\n  527  /////////////////////////////////////////////////////////////////////////\n  528  void ToVRML::apply(osg::Group& node) {\n  529:   //cout << \"Group\" << endl;\n  530    _fout << indent() << \"Group {\\n\";\n  531    _fout << indentM() << \"children [\\n\";\n  ...\n  549  /////////////////////////////////////////////////////////////////////////\n  550  void ToVRML::apply(osg::MatrixTransform& node) {\n  551:   //cout << \"MatrixTransform\" << endl;\n  552    osg::Matrixf mat = node.getMatrix();\n  553    //   for(int i=0;i<16;i++){\n  554:   //     cout <<mat.ptr()[i]<<\" \";\n  555    //   }\n  556    //   cout<<endl;\n  ...\n  670  /////////////////////////////////////////////////////////////////////////\n  671  void ToVRML::apply(osg::LOD& node) {\n  672:   //std::cout << \"LOD\" << endl;\n  673    _fout << indent() << \"LOD {\\n\";\n  674  \n  ...\n  769      osg::StateSet* ssFinal = new osg::StateSet();\n  770      ssFinal->setGlobalDefaults();\n  771:     //std::cout << \"StateSet Stack Size \" << _stack.size() << std::endl;\n  772      for (unsigned int i = 0; i < _stack.size(); i++) {\n  773        osg::StateSet* ssCur = _stack[i].get();\n  ...\n  799      //shininess = mat->getShininess(osg::Material::FRONT);\n  800      //emission = mat->getEmission(osg::Material::FRONT);\n  801:     //std::cout << \"MATERIAL \" << ambient[3] << \" \" << matLoaded->getAmbient(osg::Material::FRONT)[3] << std::endl;\n  802  \n  803      if ((matLoaded->getAmbient(osg::Material::FRONT) == mat->getAmbient(osg::Material::FRONT)) && (matLoaded->getDiffuse(osg::Material::FRONT)\n  ...\n  826  void ToVRML::findTextureName(osg::Texture2D* tex, std::string& name, bool& alreadyLoaded) {\n  827  \n  828:   //std::cout << \"ORI -\" << tex->getImage() << \"- \" << std::endl;\n  829    if (tex->getImage() == NULL) {\n  830      tex->setImage(_defaultImage.get());\n  ...\n  951    int currentFaces = 0;\n  952    if (mode == osg::PrimitiveSet::TRIANGLES) {\n  953:     //std::cout << \"TRIANGLES\" << std::endl;\n  954      for (unsigned int j = 0; j < number; j += 3) {\n  955        _fout << indent() << indices[j] << \",\" << indices[j + 1] << \",\" << indices[j + 2] << \",-1,\\n\";\n  ...\n  960  \n  961    } else if (mode == osg::PrimitiveSet::TRIANGLE_FAN) {\n  962:     //std::cout << \"TRIANGLE FAN\" << std::endl;\n  963      int firstPoint = indices[0];\n  964      int secondPoint = indices[1];\n  ...\n  972  \n  973    } else if (mode == osg::PrimitiveSet::TRIANGLE_STRIP) {\n  974:     //std::cout << \"TRIANGLE STRIP\" << std::endl;\n  975      int firstPoint = indices[0];\n  976      int secondPoint = indices[1];\n  ...\n  991  \n  992    } else if (mode == osg::PrimitiveSet::QUADS) {\n  993:     //std::cout << \"QUADS\" << std::endl;\n  994      for (unsigned int j = 0; j < number; j += 4) {\n  995        _fout << indent() << indices[j] << \",\" << indices[j + 1] << \",\" << indices[j + 2] << \",\" << indices[j + 3] << \",-1,\\n\";\n  ...\n 1000  \n 1001    } else if (mode == osg::PrimitiveSet::QUAD_STRIP) {\n 1002:     //std::cout << \"QUADS STRIP\" << std::endl;\n 1003      int firstPoint = indices[0];\n 1004      int secondPoint = indices[1];\n ....\n 1013  \n 1014    } else if (mode == osg::PrimitiveSet::POLYGON) {\n 1015:     //std::cout << \"POLYGON\" << std::endl;\n 1016      _fout << indent();\n 1017      for (unsigned int j = 0; j < number; j++) {\n ....\n 1078  \n 1079    } else if (texGen.valid()) {\n 1080:     //std::cout << \"TEXGEN\" << std::endl;\n 1081      osg::ref_ptr < osg::Vec2Array > uvArray = buildUVArray(texGen.get(), array2);\n 1082      if (uvArray.valid()) {\n ....\n 1085  \n 1086    } else if (texEnv.valid()) {\n 1087:     //std::cout << \"TEXENV\" << std::endl;\n 1088      osg::ref_ptr < osg::Vec2Array > uvArray = buildUVArray(texEnv.get(), array2);\n 1089      if (uvArray.valid()) {\n ....\n 1198    osg::TexGen::Mode mode = texGen->getMode();\n 1199    if (mode == osg::TexGen::OBJECT_LINEAR) {\n 1200:     //std::cout << \"I know\" << std::endl;\n 1201  \n 1202      uvRet = new osg::Vec2Array();\n ....\n 1240   // osg::TexEnv::Mode mode = texEnv->getMode();\n 1241    //if (mode == osg::TexEnv::MODULATE) {\n 1242:   //  std::cout << \"I know\" << std::endl;\n 1243    //} else {\n 1244    osg::notify(osg::ALWAYS) << \"Unknown TexEnv mode\" << std::endl;\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/zip/ZipArchive.cpp:\n  385          else\n  386          {\n  387:             //std::cout << \"Error- failed to allocate enough memory to unzip file '\" << ze->name << \", with size '\" << ze->unc_size << std::endl;\n  388          }\n  389      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgShadow/DebugShadowMap.cpp:\n  145      result = bb.center() != bb_prev.center() || bb.radius() != bb_prev.radius();\n  146      if( result )\n  147:         std::cout << \"Box<\" << name << \"> (\" \n  148                    << ( bb._max._v[0] + bb._min._v[0] ) * 0.5 << \" \"\n  149                    << ( bb._max._v[1] + bb._min._v[1] ) * 0.5 << \" \" \n  ...\n  171  \n  172      if( result ) {\n  173:         std::cout << \"Polytope<\" << name \n  174                    << \"> size(\" << p.getPlaneList().size() << \")\"\n  175                    << std::endl;\n  ...\n  180                  if( p.getPlaneList()[i] != p_prev.getPlaneList()[i] )\n  181                  {\n  182:                     std::cout << \"Plane<\" << i \n  183                          << \"> (\" \n  184                          << p.getPlaneList()[i].asVec4()[0] << \", \"\n  ...\n  209  \n  210      if( result )\n  211:         std::cout << \"Matrix<\" << name << \"> \" << std::endl \n  212              <<\"[ \" << m(0,0) << \" \" << m(0,1) << \" \" << m(0,2) << \" \" << m(0,3) << \" ]  \" << std::endl\n  213              <<\"[ \" << m(1,0) << \" \" << m(1,1) << \" \" << m(1,2) << \" \" << m(1,3) << \" ]  \" << std::endl\n  ...\n  641      osg::Vec3d vme = computeShadowTexelToPixelError( mvpwMain, mvpwShadow, vm );\n  642  \n  643:     std::cout << std::setprecision( 3 ) << \" \"\n  644          << \"ne=(\" << vne[0] << \",\" << vne[1] << \",\" << vne[2] << \")  \"\n  645          << \"fe=(\" << vfe[0] << \",\" << vfe[1] << \",\" << vfe[2] << \")  \"\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgShadow/ParallelSplitShadowMap.cpp:\n  211          sstr << \"}\"<< std::endl;\n  212  \n  213:         //std::cout << sstr.str() << std::endl;\n  214          if ( splitCount == nbrSplits-1 ) { OSG_INFO << std::endl << \"ParallelSplitShadowMap: GLSL shader code:\" << std::endl << \"-------------------------------------------------------------------\"  << std::endl << sstr.str() << std::endl; }\n  215  \n  ...\n  831      frustumCorners[7] = const_pointNearTL* invProjViewMat;\n  832  \n  833:     //std::cout << \"camFar : \"<<pssmShadowSplitTexture._splitID << \" / \" << camNear << \",\" << camFar << std::endl;\n  834  }\n  835  \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgSim/Impostor.cpp:\n  101  {\n  102  \n  103:     //std::cout << \"distance(\"<<coord<<\", \"<<matrix<<\")\"<<std::endl;\n  104  \n  105      return -((osgUtil::CullVisitor::value_type)coord[0]*(osgUtil::CullVisitor::value_type)matrix(0,2)+(osgUtil::CullVisitor::value_type)coord[1]*(osgUtil::CullVisitor::value_type)matrix(1,2)+(osgUtil::CullVisitor::value_type)coord[2]*(osgUtil::CullVisitor::value_type)matrix(2,2)+matrix(3,2));\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgSim/LightPointNode.cpp:\n  314              float pixelSize = cv->pixelSize(position,lp._radius);\n  315  \n  316:             //            cout << \"pixelsize = \"<<pixelSize<<endl;\n  317  \n  318              // adjust pixel size to account for intensity.\n  ...\n  400      }\n  401  #ifdef USE_TIMER\n  402:     cout << \"compute\"<<endl;\n  403:     cout << \"  t2-t1=\"<<t2-t1<<endl;\n  404:     cout << \"  t4-t3=\"<<t4-t3<<endl;\n  405:     cout << \"  t6-t5=\"<<t6-t5<<endl;\n  406:     cout << \"  t8-t7=\"<<t8-t7<<endl;\n  407:     cout << \"_lightPointList.size()=\"<<_lightPointList.size()<<endl;\n  408:     cout << \"  t8-t7/size = \"<<(float)(t8-t7)/(float)_lightPointList.size()<<endl;\n  409  #endif\n  410  }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgText/Font.cpp:\n  468      if (glyphTexture)\n  469      {\n  470:         //cout << \"    found space for texture \"<<glyphTexture<<\" posX=\"<<posX<<\" posY=\"<<posY<<endl;\n  471      }\n  472      \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgUtil/CullVisitor.cpp:\n  260          // OSG_INFO << \"Persepective matrix before clamping\"<<projection<<std::endl;\n  261  \n  262:         //std::cout << \"_computed_znear\"<<_computed_znear<<std::endl;\n  263:         //std::cout << \"_computed_zfar\"<<_computed_zfar<<std::endl;\n  264  \n  265          value_type zfarPushRatio = 1.02;\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgUtil/MeshOptimizers.cpp:\n  710      VertexCacheMissVisitor missv;\n  711      missv.doGeometry(geom);\n  712:     cout << \"Before optimization: misses: \" << missv.misses\n  713           << \" triangles: \" << missv.triangles << \" acmr: \";\n  714      if (missv.triangles > 0.0)\n  715:         cout << (double)missv.misses / (double)missv.triangles << \"\\n\";\n  716      else\n  717:         cout << \"0.0\\n\";\n  718      missv.reset();\n  719  #endif\n  ...\n  751  #if 0\n  752      missv.doGeometry(geom);\n  753:     cout << \"After optimization: misses: \" << missv.misses\n  754           << \" triangles: \" << missv.triangles << \" acmr: \";\n  755      if (missv.triangles > 0.0)\n  756:         cout << (double)missv.misses / (double)missv.triangles << \"\\n\";\n  757      else\n  758:         cout << \"0.0\\n\";\n  759  #endif\n  760      geom.dirtyDisplayList();\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgUtil/RenderBin.cpp:\n  265      // the StateGraph leaves is already coarse grained sorted, this\n  266      // sorting is as a function of the cull traversal.\n  267:     // cout << \"doing sortByState \"<<this<<endl;\n  268  }\n  269  \n  ...\n  305      std::sort(_renderLeafList.begin(),_renderLeafList.end(),FrontToBackSortFunctor());\n  306      \n  307: //    cout << \"sort front to back\"<<endl;\n  308  }\n  309  \n  ...\n  323      std::sort(_renderLeafList.begin(),_renderLeafList.end(),BackToFrontSortFunctor());\n  324  \n  325: //    cout << \"sort back to front\"<<endl;\n  326  }\n  327  \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgUtil/RenderLeaf.cpp:\n   25      if (state.getAbortRendering())\n   26      {\n   27:         //cout << \"early abort\"<<endl;\n   28          return;\n   29      }\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgUtil/RenderStage.cpp:\n  211      if (_preRenderList.empty()) return;\n  212      \n  213:     //cout << \"Drawing prerendering stages \"<<this<< \"  \"<<_viewport->x()<<\",\"<< _viewport->y()<<\",\"<< _viewport->width()<<\",\"<< _viewport->height()<<std::endl;\n  214      for(RenderStageList::iterator itr=_preRenderList.begin();\n  215          itr!=_preRenderList.end();\n  ...\n  218          itr->second->draw(renderInfo,previous);\n  219      }\n  220:     //cout << \"Done Drawing prerendering stages \"<<this<< \"  \"<<_viewport->x()<<\",\"<< _viewport->y()<<\",\"<< _viewport->width()<<\",\"<< _viewport->height()<<std::endl;\n  221  }\n  222  \n  ...\n 1329                 static_cast<int>(_viewport->width()),\n 1330                 static_cast<int>(_viewport->height()) );\n 1331:     //cout << \"    clearing \"<<this<< \"  \"<<_viewport->x()<<\",\"<< _viewport->y()<<\",\"<< _viewport->width()<<\",\"<< _viewport->height()<<std::endl;\n 1332      state.applyMode( GL_SCISSOR_TEST, true );\n 1333  \n ....\n 1404      if (_postRenderList.empty()) return;\n 1405      \n 1406:     //cout << \"Drawing prerendering stages \"<<this<< \"  \"<<_viewport->x()<<\",\"<< _viewport->y()<<\",\"<< _viewport->width()<<\",\"<< _viewport->height()<<std::endl;\n 1407      for(RenderStageList::iterator itr=_postRenderList.begin();\n 1408          itr!=_postRenderList.end();\n ....\n 1411          itr->second->draw(renderInfo,previous);\n 1412      }\n 1413:     //cout << \"Done Drawing prerendering stages \"<<this<< \"  \"<<_viewport->x()<<\",\"<< _viewport->y()<<\",\"<< _viewport->width()<<\",\"<< _viewport->height()<<std::endl;\n 1414  }\n 1415  \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgUtil/SceneView.cpp:\n  868      if (_camera->containsOccluderNodes())\n  869      {\n  870:         //std::cout << \"Scene graph contains occluder nodes, searching for them\"<<std::endl;\n  871          \n  872          \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgViewer/GraphicsWindowCarbon.cpp:\n   92              }\n   93          default:\n   94:             //std::cout << \"unknown: \" << GetEventClass(event) << std::endl;\n   95              break;\n   96      }\n   ..\n  810      GetEventParameter (theEvent,kEventParamKeyModifiers,typeUInt32, NULL,sizeof(modifierKeys), NULL,&modifierKeys);\n  811  \n  812:     //std::cout << modifierKeys << std::endl;\n  813      if (_lastModifierKeys == modifierKeys)\n  814          return false;\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgViewer/GraphicsWindowCocoa.mm:\n   20  #include \"DarwinUtils.h\"\n   21  \n   22: //#define DEBUG_OUT(s) std::cout << \"GraphicsWindowCocoa :: \" << s << std::endl;\n   23  \n   24  #define DEBUG_OUT(s) ;\n   ..\n  153          pressedOnKeypad = false;\n  154      \n  155:     //std::cout << std::hex << \"remap \" << key << \" keypad: \" << pressedOnKeypad << \" modifiers: \" << modifiers << std::endl;\n  156          \n  157      return s_CocoaKeyboardMap.remapKey(key, pressedOnKeypad);\n  ...\n  178      NSRect converted = NSMakeRect(rect.origin.x, y, rect.size.width, rect.size.height);\n  179      \n  180:     // std::cout << \"converting from Quartz \" << rect << \" to \" << converted << \" using screen rect \" << frame << std::endl;\n  181      \n  182      return converted;\n  ...\n  190      NSRect converted = NSMakeRect(rect.origin.x, y, rect.size.width, rect.size.height);\n  191      \n  192:     // std::cout << \"converting To Quartz   \" << rect << \" to \" << converted << \" using screen rect \" << frame << std::endl;\n  193      \n  194      return converted;\n  ...\n  373      };\n  374      \n  375:     // std::cout << \"flags: \" << flags << \" cached: \" << _cachedModifierFlags << std::endl;\n  376          \n  377      for(unsigned int i = 0; i < 5; ++i) {\n  ...\n  701          unsigned int unmodified_keyCode = remapCocoaKey([unmodified_chars characterAtIndex:0], [theEvent modifierFlags] );\n  702          unsigned int keyCode = remapCocoaKey([chars characterAtIndex:0], [theEvent modifierFlags] );\n  703:         //std::cout << std::hex << \"key dn: \" <<[chars characterAtIndex:0] << \"=\" << keyCode << \" unmodified: \" << unmodified_keyCode <<  std::endl;\n  704          _win->getEventQueue()->keyPress( keyCode, _win->getEventQueue()->getTime(), unmodified_keyCode);\n  705      }\n  ...\n  721          unsigned int unmodified_keyCode = remapCocoaKey([unmodified_chars characterAtIndex:0], [theEvent modifierFlags] );\n  722          unsigned int keyCode = remapCocoaKey([chars characterAtIndex:0], [theEvent modifierFlags] );\n  723:         //std::cout << std::hex << \"key up: \" <<[chars characterAtIndex:0] << \"=\" << keyCode << \" unmodified: \" << unmodified_keyCode <<  std::endl;\n  724            \n  725          _win->getEventQueue()->keyRelease( keyCode, _win->getEventQueue()->getTime(), unmodified_keyCode);\n  ...\n  825      bounds = convertToQuartzCoordinates(bounds);\n  826      \n  827:     // std::cout << \"windowdidmove: \" << bounds.origin.x << \" \" << bounds.origin.y << \" \" << bounds.size.width << \" \" << bounds.size.height << std::endl;\n  828     \n  829      _win->adaptResize(bounds.origin.x, bounds.origin.y, bounds.size.width, bounds.size.height);\n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgViewer/PixelBufferCocoa.mm:\n   18  void PixelBufferCocoa::init()\n   19  {\n   20:     //std::cout << \"PixelBufferCocoa :: init not implemented yet \" << std::endl;\n   21      \n   22      _valid = _initialized = true;    \n   ..\n   27  bool PixelBufferCocoa::realizeImplementation() \n   28  {\n   29:     std::cout << \"PixelBufferCocoa :: realizeImplementation not implemented yet \" << std::endl;\n   30      \n   31      NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];\n   ..\n  123  void PixelBufferCocoa::bindPBufferToTextureImplementation( GLenum buffer )\n  124  {\n  125:     std::cout << \"PixelBufferCocoa :: bindPBufferToTextureImplementation not implemented yet \" << std::endl;\n  126  }\n  127  \n\n/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgWrappers/deprecated-dotosg/osg/StateSet.cpp:\n  156  //         ++itr)\n  157  //     {\n  158: //         cout << \"Name [\"<<itr->first<<\",\"<<itr->second<<\"]\"<< std::endl;\n  159  //     }\n  160      \n\n471 matches across 109 files\n",
			"settings":
			{
				"buffer_size": 92919,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "Pdt.cpp",
			"settings":
			{
				"buffer_size": 847,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Shaders/pdt.frag",
			"settings":
			{
				"buffer_size": 2864,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 267.0,
		"selected_items":
		[
			[
				"Install",
				"Package Control: Install Package"
			],
			[
				"Insta",
				"Package Control: Install Package"
			],
			[
				"",
				"About"
			],
			[
				"comm",
				"Toggle Comment"
			],
			[
				"Packa",
				"Package Control: List Packages"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"b",
				"Build: Build"
			],
			[
				"buil",
				"Build: Build"
			],
			[
				"Package Control: In",
				"Package Control: Install Package"
			],
			[
				"run",
				"Build: Run Tests"
			],
			[
				"test",
				"Build: Run Tests"
			],
			[
				"Test",
				"Build: Run Tests"
			],
			[
				"R",
				"Set Syntax: R"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Classes/EnvironmentSet.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Classes/SceneController.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Math/ShLight.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Classes/Pdt.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/pdt.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Math/Sh.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Pdt.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Math/ShLight.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/main.frag",
		"/Users/Jaliborc/Documents/University/Coimbra/Ns2.txt",
		"/Users/Jaliborc/Documents/University/Coimbra/Redes.txt",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Classes/PdtState.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/ModelViewer.sublime-project",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Classes/DefaultSetup.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/ssss.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/SConstruct",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgShadow/ShadowMap.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Classes/MultipassEffects.h",
		"/Users/Jaliborc/Desktop/Projects.txt",
		"/Users/Jaliborc/Applications/World of Warcraft/Workspaces/OmniCC.sublime-project",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Test.cpp",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/include/osgShadow/ShadowMap",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgShadow/ShadowTechnique.cpp",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/include/osgShadow/ShadowTechnique",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgShadow/SoftShadowMap.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/shadow.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Classes/DefaultSetup.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Math/ShEval.h",
		"/Users/Jaliborc/Desktop/ShLight.cpp",
		"/Users/Jaliborc/Desktop/sh.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Classes/Environment.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/normals.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/PdtWithEffects.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/main.vert",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/superFine.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/rpdt.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Math/Rbf.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Pgt.cpp",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/include/osg/Quat",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/include/osg/MixinVector",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/include/osg/Vec3f",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osg/Quat.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/pdtMain.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/PdtEffects.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Classes/Pgt.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/pdtSimple.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/PdtMain.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/PgtMain.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Classes/PdtShader.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Mpdt.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/MpdtState.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/pgt.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/MpdtMain.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Environment.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Pgt.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/OsgViewer",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/MpdtShader.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/PdtTest.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Pdt.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Main.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/LoadTextures",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgAnimation/RigGeometry.cpp",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgAnimation/VertexInfluence.cpp",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/include/osgAnimation/VertexInfluence",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/include/osgAnimation/RigGeometry",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/fbx/fbxRMesh.cpp",
		"/Users/Jaliborc/Documents/Research/OpenSceneGraph-3.0.1/src/osgPlugins/fbx/ReaderWriterFBX.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/OldPdt.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Matrix.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/ReadStream.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/readStream.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/CustomMatrix.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Dependencies/GraspTools/include/Data.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Dependencies/GraspTools/src/ShapeHandFrame.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Dependencies/SConscript",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Dependencies/VisualHandModel/VisualHandModel.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/DepencenciesTest.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Dependencies/GraspTools/src/ContactVisualizer.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Dependencies/sconscript",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/GUITest.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/GUIExample.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Dependencies/VisualHandModel/VisualHandModel.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Slider.h",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/NEWS.txt",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/lights.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/FullscreenQuad.h",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/ShadowTesting.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/final.frag",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osgShadow/ShadowMap.cpp",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osg/AnimationPath.cpp",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/include/osg/AnimationPath",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osgAnimation/UpdateBone.cpp",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osgPlugins/ive/AnimationPathCallback.cpp",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osgPlugins/ive/AnimationPathCallback.h",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osgWrappers/serializers/osg/AnimationPathCallback.cpp",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osg/Geode.cpp",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osg/Node.cpp",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osgPlugins/ive/Node.h",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osg/NodeCallback.cpp",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/include/osg/Node",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osg/Camera.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/FullBlownEffect.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Media/normal.png",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/DirectionalTesting.cpp",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osgShadow/SoftShadowMap.cpp",
		"/Users/Jaliborc/Downloads/separable-sss-master/Demo/Shaders/SeparableSSS.fx",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/horizontal.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/firstScatter.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/ssss.vert",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/DeferredTesting.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/display.frag",
		"/Users/Jaliborc/Desktop/Shaders/mirror.frag",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osgShadow/StandardShadowMap.cpp",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osgGA/StandardManipulator.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/deferred.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/deferred.vert",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/lights.vert",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/softShadow.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/lights.glsl",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/default.vert",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/lights.shader",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/directional.frag",
		"/Users/Jaliborc/Downloads/separable-sss-master/Demo/Shaders/Main.fx",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/beckmannSpecular.frag",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/standardShadow.frag",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/include/osgShadow/SoftShadowMap",
		"/Users/Jaliborc/Downloads/OpenSceneGraph-3.0.1/src/osgShadow/MinimalDrawBoundsShadowMap.cpp",
		"/Users/Jaliborc/Documents/Research/PRTAnalysis/Osg/Shaders/directional.vert"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"",
			"*.h",
			"*.cpp",
			"*.h",
			"Test.cpp",
			"",
			"osgPlugins/fbx/*",
			"",
			"*.cpp",
			"",
			"NPS_Tutorials_src/*",
			"NPS_Tutorials*",
			"NPS_Tutorials",
			"",
			"DeferredTesting.cpp",
			"softShadow.frag",
			"default.vert",
			"*.cpp",
			"osgShadow/*.cpp",
			"*.cpp",
			"shadows.frag",
			"shadow.vert",
			"shadow.frag",
			"shadowMap.frag",
			"shadowMap.fragh",
			"shadowMap.frag",
			"*.h",
			"",
			"temp.frag",
			"",
			"VisualHandShader.cpp",
			"flat.frag",
			"vertex.glsl",
			"*.h",
			"*.cpp",
			"*.h",
			"*.inl",
			"*.cpp",
			"*.lua",
			"*.xml",
			"*.lua",
			"*.xml",
			"*.lua",
			"*.toc",
			"*.lua",
			"",
			"Slot.xml",
			"",
			"LibPetBreedInfo-1.0.lua",
			"",
			"TamerJournal.xml",
			"",
			"PetTracker/*",
			"*.lua",
			"",
			"Source/",
			"Source",
			"",
			"Lib.lua",
			"",
			"*.py",
			"",
			"*.py",
			"",
			"SpawnsTests.py",
			"SpawnsTests",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"BANANAS",
			"cout <<",
			"v3Accumulate",
			"/*************************************************************************",
			"shUpdateMaxDegree",
			"v3ZyzEulerAngles",
			"float R",
			"towigner",
			"shRotateFloatCoeffs",
			"shEvalWignerYZ",
			"cout",
			"print",
			"scalrs",
			"camera",
			"_camera",
			"(_camera",
			"_camera",
			"debug",
			"_camer",
			"addSlave",
			"addchild",
			"_camera",
			"addSlave",
			"_camera",
			"camera",
			"init",
			"FRAME_BUFFER_OBJECT",
			"osg::",
			"camera",
			"selectLight",
			"_light",
			"_light =",
			"light",
			"pdt",
			"pow",
			"shEvalWignerYZ",
			"print",
			"D3DX_PI",
			"PI",
			"stdlib",
			"D3DX_PI",
			"shYFloat",
			"D3DXVECTOR3",
			"cenes",
			"environment",
			"PositionAttitudeTransform",
			"s1",
			"material",
			"diffuse",
			"ambient",
			"transf",
			"n_elem",
			"transferCoefs[i];",
			"k(i)",
			"sampleTransfer",
			"quatDistance",
			"dot(",
			"::dot",
			"dot",
			"maker",
			"UpdateVisitor",
			"OSG_ALPHAFUNC",
			"scene\\",
			"scene",
			"light",
			"fullsc",
			"display",
			"hand",
			"hand,m",
			"light",
			"scene",
			"readF",
			"FullscreenQuad",
			"minima",
			"transferCoefs",
			"numtex",
			"numc",
			"numce",
			"vec2",
			"vec3",
			"vec2",
			"buildVertex2BoneList",
			"VertexInfluence",
			"VertexInfluenceMap",
			"_vertexInfluenceMap",
			"_vertexInfluenceSet",
			"_geometry",
			"matrix",
			"UpdateVertex",
			"FindNearestParentSkeleton",
			"riggeome",
			"rigge",
			"_geome",
			"source",
			"mater",
			"copyFrom",
			"UpdateVertex",
			"drw",
			"_geometry",
			"setSourceGeometry",
			"_vertexInfluenceMap",
			"buffer",
			"fbx",
			"drawIm",
			"samples",
			"arma::",
			"total",
			"Vx/",
			"ContactVisualizer",
			"unordered_map",
			"MASK_2D",
			"Notebook",
			"class Notebook: public osgWidget::Box {\ncallbackTabPressed",
			"callbackTabPressed",
			"NewPass",
			"update",
			"dynam",
			"dirty",
			"dirtu",
			"AnimationPathCallbackVisitor",
			"apcv",
			"update",
			"AnimationPathCallback",
			"makeUpdate",
			"update",
			"s",
			"accept",
			"visitor"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"osg::PI",
			"reflected",
			"fixed",
			"",
			"width",
			"",
			"vec4",
			"",
			"WoWUnit",
			"",
			" ",
			"",
			",[",
			"Addon.Sets.MapFilter",
			"Addon.Sets.HideTracker",
			"Addon.Sets.CapturedPets",
			"Addon.Sets",
			"Addon.Sets.capturedPets",
			"Addon.Sets.hideTracker",
			"Addon.Sets",
			"link",
			"Spawn"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Math/Sh.h",
					"settings":
					{
						"buffer_size": 1474,
						"regions":
						{
						},
						"selection":
						[
							[
								1381,
								1392
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 209.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Classes/SceneController.h",
					"settings":
					{
						"buffer_size": 2115,
						"regions":
						{
						},
						"selection":
						[
							[
								1534,
								1534
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 209.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"settings":
					{
						"buffer_size": 92919,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										162,
										169
									],
									[
										342,
										349
									],
									[
										536,
										543
									],
									[
										729,
										736
									],
									[
										1025,
										1032
									],
									[
										1302,
										1309
									],
									[
										1662,
										1669
									],
									[
										1816,
										1823
									],
									[
										1942,
										1949
									],
									[
										2002,
										2009
									],
									[
										2200,
										2207
									],
									[
										2363,
										2370
									],
									[
										2415,
										2422
									],
									[
										2605,
										2612
									],
									[
										2891,
										2898
									],
									[
										3192,
										3199
									],
									[
										3346,
										3353
									],
									[
										3513,
										3520
									],
									[
										3680,
										3687
									],
									[
										3885,
										3892
									],
									[
										4055,
										4062
									],
									[
										4229,
										4236
									],
									[
										4405,
										4412
									],
									[
										4581,
										4588
									],
									[
										4761,
										4768
									],
									[
										4929,
										4936
									],
									[
										5132,
										5139
									],
									[
										5343,
										5350
									],
									[
										5560,
										5567
									],
									[
										5701,
										5708
									],
									[
										5970,
										5977
									],
									[
										6312,
										6319
									],
									[
										6522,
										6529
									],
									[
										6882,
										6889
									],
									[
										7040,
										7047
									],
									[
										7329,
										7336
									],
									[
										7652,
										7659
									],
									[
										7877,
										7884
									],
									[
										8288,
										8295
									],
									[
										8383,
										8390
									],
									[
										8630,
										8637
									],
									[
										8719,
										8726
									],
									[
										8983,
										8990
									],
									[
										9146,
										9153
									],
									[
										9307,
										9314
									],
									[
										9541,
										9548
									],
									[
										9778,
										9785
									],
									[
										9980,
										9987
									],
									[
										10234,
										10241
									],
									[
										10539,
										10546
									],
									[
										10630,
										10637
									],
									[
										10721,
										10728
									],
									[
										10812,
										10819
									],
									[
										10915,
										10922
									],
									[
										11216,
										11223
									],
									[
										11422,
										11429
									],
									[
										11642,
										11649
									],
									[
										11939,
										11946
									],
									[
										12199,
										12206
									],
									[
										12382,
										12389
									],
									[
										12706,
										12713
									],
									[
										13111,
										13118
									],
									[
										13351,
										13358
									],
									[
										13561,
										13568
									],
									[
										13812,
										13819
									],
									[
										14040,
										14047
									],
									[
										14346,
										14353
									],
									[
										14534,
										14541
									],
									[
										14829,
										14836
									],
									[
										15111,
										15118
									],
									[
										15430,
										15437
									],
									[
										15737,
										15744
									],
									[
										16046,
										16053
									],
									[
										16342,
										16349
									],
									[
										16630,
										16637
									],
									[
										17000,
										17007
									],
									[
										17318,
										17325
									],
									[
										17476,
										17483
									],
									[
										17753,
										17760
									],
									[
										18133,
										18140
									],
									[
										18308,
										18315
									],
									[
										18497,
										18504
									],
									[
										18665,
										18672
									],
									[
										19005,
										19012
									],
									[
										19275,
										19282
									],
									[
										19582,
										19589
									],
									[
										19772,
										19779
									],
									[
										20053,
										20060
									],
									[
										20231,
										20238
									],
									[
										20325,
										20332
									],
									[
										20433,
										20440
									],
									[
										20527,
										20534
									],
									[
										20685,
										20692
									],
									[
										20958,
										20965
									],
									[
										21270,
										21277
									],
									[
										21472,
										21479
									],
									[
										21678,
										21685
									],
									[
										21886,
										21893
									],
									[
										22112,
										22119
									],
									[
										22338,
										22345
									],
									[
										22546,
										22553
									],
									[
										22836,
										22843
									],
									[
										23079,
										23086
									],
									[
										23179,
										23186
									],
									[
										23411,
										23418
									],
									[
										23743,
										23750
									],
									[
										23965,
										23972
									],
									[
										24228,
										24235
									],
									[
										24488,
										24495
									],
									[
										24662,
										24669
									],
									[
										24931,
										24938
									],
									[
										25211,
										25218
									],
									[
										25364,
										25371
									],
									[
										25694,
										25701
									],
									[
										25988,
										25995
									],
									[
										26264,
										26271
									],
									[
										26520,
										26527
									],
									[
										26783,
										26790
									],
									[
										27053,
										27060
									],
									[
										27382,
										27389
									],
									[
										27669,
										27676
									],
									[
										28107,
										28114
									],
									[
										28314,
										28321
									],
									[
										28652,
										28659
									],
									[
										28888,
										28895
									],
									[
										29097,
										29104
									],
									[
										29379,
										29386
									],
									[
										29686,
										29693
									],
									[
										29881,
										29888
									],
									[
										30060,
										30067
									],
									[
										30251,
										30258
									],
									[
										30327,
										30334
									],
									[
										30399,
										30406
									],
									[
										30479,
										30486
									],
									[
										30555,
										30562
									],
									[
										30631,
										30638
									],
									[
										30705,
										30712
									],
									[
										30779,
										30786
									],
									[
										30867,
										30874
									],
									[
										30947,
										30954
									],
									[
										31023,
										31030
									],
									[
										31099,
										31106
									],
									[
										31173,
										31180
									],
									[
										31247,
										31254
									],
									[
										31335,
										31342
									],
									[
										31425,
										31432
									],
									[
										31511,
										31518
									],
									[
										31611,
										31618
									],
									[
										31697,
										31704
									],
									[
										31781,
										31788
									],
									[
										31865,
										31872
									],
									[
										31963,
										31970
									],
									[
										32043,
										32050
									],
									[
										32113,
										32120
									],
									[
										32179,
										32186
									],
									[
										32253,
										32260
									],
									[
										32323,
										32330
									],
									[
										32393,
										32400
									],
									[
										32473,
										32480
									],
									[
										32541,
										32548
									],
									[
										32609,
										32616
									],
									[
										32695,
										32702
									],
									[
										32783,
										32790
									],
									[
										32861,
										32868
									],
									[
										33044,
										33051
									],
									[
										33120,
										33127
									],
									[
										33188,
										33195
									],
									[
										33254,
										33261
									],
									[
										33324,
										33331
									],
									[
										33392,
										33399
									],
									[
										33460,
										33467
									],
									[
										33527,
										33534
									],
									[
										33594,
										33601
									],
									[
										33680,
										33687
									],
									[
										33750,
										33757
									],
									[
										33818,
										33825
									],
									[
										33886,
										33893
									],
									[
										33953,
										33960
									],
									[
										34020,
										34027
									],
									[
										34106,
										34113
									],
									[
										34181,
										34188
									],
									[
										34254,
										34261
									],
									[
										34334,
										34341
									],
									[
										34407,
										34414
									],
									[
										34479,
										34486
									],
									[
										34551,
										34558
									],
									[
										34634,
										34641
									],
									[
										34716,
										34723
									],
									[
										34781,
										34788
									],
									[
										34844,
										34851
									],
									[
										34911,
										34918
									],
									[
										34976,
										34983
									],
									[
										35041,
										35048
									],
									[
										35111,
										35118
									],
									[
										35175,
										35182
									],
									[
										35239,
										35246
									],
									[
										35322,
										35329
									],
									[
										35396,
										35403
									],
									[
										35465,
										35472
									],
									[
										35725,
										35732
									],
									[
										35986,
										35993
									],
									[
										36289,
										36296
									],
									[
										36539,
										36546
									],
									[
										36717,
										36724
									],
									[
										37027,
										37034
									],
									[
										37328,
										37335
									],
									[
										37722,
										37729
									],
									[
										37984,
										37991
									],
									[
										38264,
										38271
									],
									[
										38536,
										38543
									],
									[
										38907,
										38914
									],
									[
										39035,
										39042
									],
									[
										39345,
										39352
									],
									[
										39611,
										39618
									],
									[
										39878,
										39885
									],
									[
										40147,
										40154
									],
									[
										40468,
										40475
									],
									[
										40639,
										40646
									],
									[
										40891,
										40898
									],
									[
										41195,
										41202
									],
									[
										41253,
										41260
									],
									[
										41349,
										41356
									],
									[
										41460,
										41467
									],
									[
										41557,
										41564
									],
									[
										41742,
										41749
									],
									[
										41923,
										41930
									],
									[
										42097,
										42104
									],
									[
										42373,
										42380
									],
									[
										42644,
										42651
									],
									[
										42903,
										42910
									],
									[
										43158,
										43165
									],
									[
										43506,
										43513
									],
									[
										43833,
										43840
									],
									[
										44091,
										44098
									],
									[
										44201,
										44208
									],
									[
										44276,
										44283
									],
									[
										44362,
										44369
									],
									[
										44443,
										44450
									],
									[
										44523,
										44530
									],
									[
										44601,
										44608
									],
									[
										44688,
										44695
									],
									[
										44782,
										44789
									],
									[
										44892,
										44899
									],
									[
										44967,
										44974
									],
									[
										45053,
										45060
									],
									[
										45134,
										45141
									],
									[
										45214,
										45221
									],
									[
										45292,
										45299
									],
									[
										45379,
										45386
									],
									[
										45473,
										45480
									],
									[
										45581,
										45588
									],
									[
										45656,
										45663
									],
									[
										45745,
										45752
									],
									[
										45823,
										45830
									],
									[
										45910,
										45917
									],
									[
										46026,
										46033
									],
									[
										46075,
										46082
									],
									[
										46146,
										46153
									],
									[
										46226,
										46233
									],
									[
										46306,
										46313
									],
									[
										46390,
										46397
									],
									[
										46684,
										46691
									],
									[
										47042,
										47049
									],
									[
										47170,
										47177
									],
									[
										47475,
										47482
									],
									[
										47671,
										47678
									],
									[
										47821,
										47828
									],
									[
										48072,
										48079
									],
									[
										48339,
										48346
									],
									[
										48509,
										48516
									],
									[
										48754,
										48761
									],
									[
										48924,
										48931
									],
									[
										49201,
										49208
									],
									[
										49458,
										49465
									],
									[
										49628,
										49635
									],
									[
										49869,
										49876
									],
									[
										50062,
										50069
									],
									[
										50479,
										50486
									],
									[
										50668,
										50675
									],
									[
										50829,
										50836
									],
									[
										51040,
										51047
									],
									[
										51423,
										51430
									],
									[
										51631,
										51638
									],
									[
										51822,
										51829
									],
									[
										52027,
										52034
									],
									[
										52261,
										52268
									],
									[
										52565,
										52572
									],
									[
										52874,
										52881
									],
									[
										53062,
										53069
									],
									[
										53182,
										53189
									],
									[
										53351,
										53358
									],
									[
										53469,
										53476
									],
									[
										53584,
										53591
									],
									[
										53866,
										53873
									],
									[
										54056,
										54063
									],
									[
										54450,
										54457
									],
									[
										54667,
										54674
									],
									[
										54796,
										54803
									],
									[
										54938,
										54945
									],
									[
										55374,
										55381
									],
									[
										55618,
										55625
									],
									[
										55714,
										55721
									],
									[
										55747,
										55754
									],
									[
										55800,
										55807
									],
									[
										55853,
										55860
									],
									[
										56094,
										56101
									],
									[
										56128,
										56135
									],
									[
										56181,
										56188
									],
									[
										56234,
										56241
									],
									[
										56299,
										56306
									],
									[
										56532,
										56539
									],
									[
										56720,
										56727
									],
									[
										56974,
										56981
									],
									[
										57112,
										57119
									],
									[
										57215,
										57222
									],
									[
										57392,
										57399
									],
									[
										57643,
										57650
									],
									[
										57781,
										57788
									],
									[
										57885,
										57892
									],
									[
										58174,
										58181
									],
									[
										58487,
										58494
									],
									[
										58761,
										58768
									],
									[
										58985,
										58992
									],
									[
										59237,
										59244
									],
									[
										59580,
										59587
									],
									[
										59679,
										59686
									],
									[
										59781,
										59788
									],
									[
										60138,
										60145
									],
									[
										60451,
										60458
									],
									[
										60567,
										60574
									],
									[
										60683,
										60690
									],
									[
										60799,
										60806
									],
									[
										61014,
										61021
									],
									[
										61170,
										61177
									],
									[
										61287,
										61294
									],
									[
										61429,
										61436
									],
									[
										61552,
										61559
									],
									[
										61652,
										61659
									],
									[
										61779,
										61786
									],
									[
										61900,
										61907
									],
									[
										62021,
										62028
									],
									[
										62207,
										62214
									],
									[
										62309,
										62316
									],
									[
										62384,
										62391
									],
									[
										62455,
										62462
									],
									[
										62578,
										62585
									],
									[
										62754,
										62761
									],
									[
										62942,
										62949
									],
									[
										63152,
										63159
									],
									[
										63361,
										63368
									],
									[
										63583,
										63590
									],
									[
										63893,
										63900
									],
									[
										64096,
										64103
									],
									[
										64181,
										64188
									],
									[
										64316,
										64323
									],
									[
										64399,
										64406
									],
									[
										64611,
										64618
									],
									[
										64922,
										64929
									],
									[
										65064,
										65071
									],
									[
										65337,
										65344
									],
									[
										65418,
										65425
									],
									[
										65621,
										65628
									],
									[
										65690,
										65697
									],
									[
										65862,
										65869
									],
									[
										66096,
										66103
									],
									[
										66463,
										66470
									],
									[
										66810,
										66817
									],
									[
										67170,
										67177
									],
									[
										67361,
										67368
									],
									[
										67529,
										67536
									],
									[
										67745,
										67752
									],
									[
										67916,
										67923
									],
									[
										68187,
										68194
									],
									[
										68484,
										68491
									],
									[
										68643,
										68650
									],
									[
										68936,
										68943
									],
									[
										69204,
										69211
									],
									[
										69507,
										69514
									],
									[
										69766,
										69773
									],
									[
										69967,
										69974
									],
									[
										70218,
										70225
									],
									[
										70553,
										70560
									],
									[
										70776,
										70783
									],
									[
										71006,
										71013
									],
									[
										71393,
										71400
									],
									[
										71894,
										71901
									],
									[
										72071,
										72078
									],
									[
										72351,
										72358
									],
									[
										72775,
										72782
									],
									[
										73159,
										73166
									],
									[
										73193,
										73200
									],
									[
										73281,
										73288
									],
									[
										73342,
										73349
									],
									[
										73565,
										73572
									],
									[
										73855,
										73862
									],
									[
										73966,
										73973
									],
									[
										74248,
										74255
									],
									[
										74491,
										74498
									],
									[
										74725,
										74732
									],
									[
										74847,
										74854
									],
									[
										75118,
										75125
									],
									[
										75433,
										75440
									],
									[
										75771,
										75778
									],
									[
										76110,
										76117
									],
									[
										76463,
										76470
									],
									[
										76732,
										76739
									],
									[
										76866,
										76873
									],
									[
										77081,
										77088
									],
									[
										77275,
										77282
									],
									[
										77606,
										77613
									],
									[
										77998,
										78005
									],
									[
										78250,
										78257
									],
									[
										78545,
										78552
									],
									[
										78760,
										78767
									],
									[
										78968,
										78975
									],
									[
										79282,
										79289
									],
									[
										79489,
										79496
									],
									[
										79676,
										79683
									],
									[
										79900,
										79907
									],
									[
										80182,
										80189
									],
									[
										80389,
										80396
									],
									[
										80668,
										80675
									],
									[
										81048,
										81055
									],
									[
										81292,
										81299
									],
									[
										81572,
										81579
									],
									[
										81768,
										81775
									],
									[
										82154,
										82161
									],
									[
										82517,
										82524
									],
									[
										82905,
										82912
									],
									[
										83143,
										83150
									],
									[
										83712,
										83719
									],
									[
										83881,
										83888
									],
									[
										83917,
										83924
									],
									[
										83961,
										83968
									],
									[
										84005,
										84012
									],
									[
										84049,
										84056
									],
									[
										84093,
										84100
									],
									[
										84169,
										84176
									],
									[
										84409,
										84416
									],
									[
										84734,
										84741
									],
									[
										84811,
										84818
									],
									[
										85096,
										85103
									],
									[
										85272,
										85279
									],
									[
										85367,
										85374
									],
									[
										85489,
										85496
									],
									[
										85664,
										85671
									],
									[
										85759,
										85766
									],
									[
										86061,
										86068
									],
									[
										86245,
										86252
									],
									[
										86419,
										86426
									],
									[
										86629,
										86636
									],
									[
										86852,
										86859
									],
									[
										87205,
										87212
									],
									[
										87524,
										87531
									],
									[
										87804,
										87811
									],
									[
										88159,
										88166
									],
									[
										88504,
										88511
									],
									[
										88782,
										88789
									],
									[
										89034,
										89041
									],
									[
										89318,
										89325
									],
									[
										89485,
										89492
									],
									[
										89817,
										89824
									],
									[
										90103,
										90110
									],
									[
										90308,
										90315
									],
									[
										90719,
										90726
									],
									[
										91244,
										91251
									],
									[
										91603,
										91610
									],
									[
										92015,
										92022
									],
									[
										92228,
										92235
									],
									[
										92511,
										92518
									],
									[
										92796,
										92803
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								166,
								166
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Pdt.cpp",
					"settings":
					{
						"buffer_size": 847,
						"regions":
						{
						},
						"selection":
						[
							[
								80,
								80
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Shaders/pdt.frag",
					"settings":
					{
						"buffer_size": 2864,
						"regions":
						{
						},
						"selection":
						[
							[
								104,
								104
							]
						],
						"settings":
						{
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 200.0
	},
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"scene",
				"Osg/Classes/SceneController.h"
			],
			[
				"shlight",
				"Osg/Math/ShLight.cpp"
			],
			[
				"pdt",
				"Osg/Shaders/pdt.frag"
			],
			[
				"shli",
				"Osg/Math/ShLight.cpp"
			],
			[
				"sh",
				"Osg/Math/Sh.h"
			],
			[
				"main",
				"Osg/Shaders/main.frag"
			],
			[
				"pdt.h",
				"Osg/Classes/Pdt.h"
			],
			[
				"envi",
				"Osg/Classes/EnvironmentSet.h"
			],
			[
				"ssss",
				"Osg/Shaders/ssss.frag"
			],
			[
				"sss.f",
				"Osg/Shaders/ssss.frag"
			],
			[
				"shadowte",
				"OpenSceneGraph-3.0.1/src/osgShadow/ShadowTechnique.cpp"
			],
			[
				"shadowtec",
				"OpenSceneGraph-3.0.1/include/osgShadow/ShadowTechnique"
			],
			[
				"shadowmap",
				"OpenSceneGraph-3.0.1/include/osgShadow/ShadowMap"
			],
			[
				"softshad",
				"OpenSceneGraph-3.0.1/src/osgShadow/SoftShadowMap.cpp"
			],
			[
				"vec3f",
				"OpenSceneGraph-3.0.1/include/osg/Vec3f"
			],
			[
				"vecto",
				"OpenSceneGraph-3.0.1/include/osg/MixinVector"
			],
			[
				"quat.cpp",
				"OpenSceneGraph-3.0.1/src/osg/Quat.cpp"
			],
			[
				"quat",
				"OpenSceneGraph-3.0.1/include/osg/Quat"
			],
			[
				"mult",
				"Osg/Classes/MultipassEffects.h"
			],
			[
				"environment",
				"Osg/Environment.h"
			],
			[
				"vertex",
				"OpenSceneGraph-3.0.1/src/osgAnimation/VertexInfluence.cpp"
			],
			[
				"rigg",
				"OpenSceneGraph-3.0.1/src/osgAnimation/RigGeometry.cpp"
			],
			[
				"readwriterf",
				"OpenSceneGraph-3.0.1/src/osgPlugins/fbx/ReaderWriterFBX.cpp"
			],
			[
				"rigge",
				"OpenSceneGraph-3.0.1/include/osgAnimation/RigGeometry"
			],
			[
				"ogt",
				"Osg/Pgt.h"
			],
			[
				"matrx",
				"Osg/Matrix.h"
			],
			[
				"data.h",
				"Osg/Dependencies/GraspTools/include/Data.h"
			],
			[
				"guitest",
				"Osg/GUITest.cpp"
			],
			[
				"sc",
				"Osg/SConstruct"
			],
			[
				"shadow.",
				"Osg/Shaders/shadow.frag"
			],
			[
				"ssss.f",
				"Osg/Shaders/ssss.frag"
			],
			[
				"final",
				"Osg/Shaders/final.frag"
			],
			[
				"scon",
				"Osg/SConstruct"
			],
			[
				"sha",
				"Osg/ShadowTesting.cpp"
			],
			[
				"en",
				"Osg/Environment.h"
			],
			[
				"shadowma",
				"OpenSceneGraph-3.0.1/src/osgShadow/ShadowMap.cpp"
			],
			[
				"animationpath",
				"OpenSceneGraph-3.0.1/src/osg/AnimationPath.cpp"
			],
			[
				"animationpathcallback",
				"OpenSceneGraph-3.0.1/src/osgWrappers/serializers/osg/AnimationPathCallback.cpp"
			],
			[
				"updatebone",
				"OpenSceneGraph-3.0.1/src/osgAnimation/UpdateBone.cpp"
			],
			[
				"node.h",
				"OpenSceneGraph-3.0.1/src/osgPlugins/ive/Node.h"
			],
			[
				"node.c",
				"OpenSceneGraph-3.0.1/src/osg/Node.cpp"
			],
			[
				"geode.c",
				"OpenSceneGraph-3.0.1/src/osg/Geode.cpp"
			],
			[
				"pgt",
				"Osg/Pgt.h"
			],
			[
				"sss",
				"Osg/Shaders/ssss.frag"
			],
			[
				"camera.cpp",
				"OpenSceneGraph-3.0.1/src/osg/Camera.cpp"
			],
			[
				"shaowma",
				"OpenSceneGraph-3.0.1/src/osgShadow/ShadowMap.cpp"
			],
			[
				"light",
				"Osg/Shaders/lights.frag"
			],
			[
				"softshado",
				"OpenSceneGraph-3.0.1/src/osgShadow/SoftShadowMap.cpp"
			],
			[
				"standard",
				"OpenSceneGraph-3.0.1/src/osgShadow/StandardShadowMap.cpp"
			],
			[
				"stan",
				"OpenSceneGraph-3.0.1/src/osgGA/StandardManipulator.cpp"
			],
			[
				"env",
				"Osg/Environment.h"
			],
			[
				"shadow",
				"Osg/ShadowTesting.cpp"
			],
			[
				"standardshadow",
				"OpenSceneGraph-3.0.1/src/osgShadow/StandardShadowMap.cpp"
			],
			[
				"softsha",
				"OpenSceneGraph-3.0.1/src/osgShadow/SoftShadowMap.cpp"
			],
			[
				"shadw",
				"Osg/ShadowTesting.cpp"
			],
			[
				"shadowmap.cpp",
				"OpenSceneGraph-3.0.1/src/osgShadow/ShadowMap.cpp"
			],
			[
				"standardshadow.cpp",
				"OpenSceneGraph-3.0.1/src/osgShadow/StandardShadowMap.cpp"
			],
			[
				"direct",
				"Osg/DirectionalTesting.cpp"
			],
			[
				"standr",
				"OpenSceneGraph-3.0.1/src/osgShadow/StandardShadowMap.cpp"
			],
			[
				"standa",
				"OpenSceneGraph-3.0.1/src/osgWrappers/serializers/osgShadow/StandardShadowMap.cpp"
			],
			[
				"standardsha",
				"OpenSceneGraph-3.0.1/include/osgShadow/StandardShadowMap"
			],
			[
				"standardshadowma",
				"OpenSceneGraph-3.0.1/include/osgShadow/StandardShadowMap"
			],
			[
				"softs",
				"OpenSceneGraph-3.0.1/src/osgShadow/SoftShadowMap.cpp"
			],
			[
				"shadowed",
				"OpenSceneGraph-3.0.1/include/osgShadow/ShadowedScene"
			],
			[
				"dire.",
				"Osg/Shaders/directional.vert"
			],
			[
				"shadowtech",
				"OpenSceneGraph-3.0.1/include/osgShadow/ShadowTechnique"
			],
			[
				"shadowt",
				"OpenSceneGraph-3.0.1/include/osgShadow/ShadowTechnique"
			],
			[
				"dire",
				"Osg/Shaders/directional.frag"
			],
			[
				"softshadowm",
				"OpenSceneGraph-3.0.1/src/osgShadow/SoftShadowMap.cpp"
			],
			[
				"shadowma.cpp",
				"OpenSceneGraph-3.0.1/src/osgShadow/ShadowMap.cpp"
			],
			[
				"",
				"Osg/RenderTesting.cpp"
			],
			[
				"verte",
				"src/integrators/sh/vertextransfer.cpp"
			],
			[
				"renderpo",
				"src/librender/renderproc.cpp"
			],
			[
				"imagepro",
				"include/mitsuba/render/imageproc.h"
			],
			[
				"renderp",
				"include/mitsuba/render/renderproc.h"
			],
			[
				"inte",
				"src/librender/integrator.cpp"
			],
			[
				"vertextr",
				"src/integrators/sh/vertextransfer.cpp"
			],
			[
				"image",
				"include/mitsuba/render/imageblock.h"
			],
			[
				"imageblock",
				"src/librender/imageblock.cpp"
			],
			[
				"integra",
				"src/librender/integrator.cpp"
			],
			[
				"perspe",
				"src/sensors/perspective.cpp"
			],
			[
				"path",
				"src/integrators/path/path.cpp"
			],
			[
				"shma",
				"src/integrators/sh/shmap.cpp"
			],
			[
				"shvect",
				"include/mitsuba/core/shvector.h"
			],
			[
				"sh.cpp",
				"src/libcore/shvector.cpp"
			],
			[
				"comm",
				"scripts/common.py"
			],
			[
				"spec",
				"PetTracker/Core/Specie.lua"
			],
			[
				"speciebl",
				"PetTracker/Map/SpecieBlip.lua"
			],
			[
				"chan",
				"PetTracker/Changelog.txt"
			],
			[
				"cn.lua",
				"PetTracker/Localization/cn.lua"
			],
			[
				"tracke",
				"PetTracker/Tracking/Tracker.lua"
			],
			[
				"worldmap",
				"PetTracker/Features/WorldMap.lua"
			],
			[
				"tamer",
				"PetTracker/Core/Tamer.lua"
			],
			[
				"journal",
				"PetTracker/Core/Journal.lua"
			],
			[
				"battletests",
				"PetTracker/Core/Tests/BattleTests.lua"
			],
			[
				"genera",
				"Tools/Client/Generators.lua"
			],
			[
				"batt",
				"PetTracker/Core/Battle.lua"
			],
			[
				"action",
				"Source/FrameXML/ActionButton.lua"
			],
			[
				"battle",
				"PetTracker/Core/Battle.lua"
			],
			[
				"global",
				"Source/FrameXML/GlobalStrings.lua"
			],
			[
				"chat",
				"Source/FrameXML/ChatFrame.lua"
			],
			[
				"petbatt",
				"Source/AddOns/Blizzard_PetBattleUI/Blizzard_PetBattleUI.lua"
			],
			[
				"glowbox",
				"PetTracker/Libs/Sushi-3.0/Classes/GlowBox.lua"
			],
			[
				"change",
				"PetTracker/Changelog.txt"
			],
			[
				"local",
				"Tools/Local.py"
			],
			[
				"filter",
				"PetTracker/Core/Tests/FilterTests.lua"
			],
			[
				"filte",
				"PetTracker/Core/Filters.lua"
			],
			[
				"chang",
				"PetTracker/Changelog.txt"
			],
			[
				"tame",
				"Journal/Features/TamerJournal.xml"
			],
			[
				"tamerjou",
				"Journal/Features/TamerJournal.lua"
			],
			[
				"world",
				"PetTracker/Features/WorldMap.lua"
			],
			[
				"specie",
				"PetTracker/Map/SpecieBlip.lua"
			],
			[
				"stable",
				"PetTracker/Map/StableBlip.lua"
			],
			[
				"journ",
				"PetTracker/Core/Journal.lua"
			],
			[
				"list",
				"PetTracker/Tracking/List.lua"
			],
			[
				"tracker",
				"PetTracker/Tracking/Tracker.lua"
			],
			[
				"dis",
				"PetTracker/Core/Display.lua"
			],
			[
				"filters",
				"PetTracker/Core/Filters.lua"
			],
			[
				"display",
				"PetTracker/Core/Display.lua"
			],
			[
				"tamerj",
				"Journal/Features/TamerJournal.xml"
			],
			[
				"tamerjourn",
				"Journal/Features/TamerJournal.lua"
			],
			[
				"filt",
				"PetTracker/Core/Filters.lua"
			],
			[
				"customse",
				"PetTracker/Libs/CustomSearch-1.0/CustomSearch-1.0.lua"
			],
			[
				"cust",
				"PetTracker/Libs/CustomSearch-1.0/CustomSearch-1.0.lua"
			],
			[
				"custom",
				"PetTracker/Libs/CustomSearch-1.0/CustomSearch-1.0.lua"
			],
			[
				"battletest",
				"PetTracker/Core/Tests/BattleTests.lua"
			],
			[
				"ability",
				"PetTracker/Combat/AbilityButton.lua"
			],
			[
				"petbattle.lua",
				"Source/AddOns/Blizzard_PetBattleUI/Blizzard_PetBattleUI.lua"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 245.0,
	"status_bar_visible": true
}
